
controlLab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000b32  00000bc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800082  00800082  00000be8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000133b  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000757  00000000  00000000  000020a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ee  00000000  00000000  000027fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  000031ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000553  00000000  00000000  00003440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000064c  00000000  00000000  00003993  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00003fdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3a       	cpi	r26, 0xA0	; 160
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0d 03 	call	0x61a	; 0x61a <main>
  8a:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_port_config>:
	return (a < b) ? a : b;
}

int max(int a, int b){
	return (a > b) ? a : b;
}
  92:	84 b3       	in	r24, 0x14	; 20
  94:	87 6f       	ori	r24, 0xF7	; 247
  96:	84 bb       	out	0x14, r24	; 20
  98:	85 b3       	in	r24, 0x15	; 21
  9a:	80 78       	andi	r24, 0x80	; 128
  9c:	85 bb       	out	0x15, r24	; 21
  9e:	08 95       	ret

000000a0 <lcd_set_4bit>:
  a0:	89 ef       	ldi	r24, 0xF9	; 249
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_set_4bit+0x4>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <lcd_set_4bit+0xa>
  aa:	00 00       	nop
  ac:	a8 98       	cbi	0x15, 0	; 21
  ae:	a9 98       	cbi	0x15, 1	; 21
  b0:	80 e3       	ldi	r24, 0x30	; 48
  b2:	85 bb       	out	0x15, r24	; 21
  b4:	aa 9a       	sbi	0x15, 2	; 21
  b6:	e1 ee       	ldi	r30, 0xE1	; 225
  b8:	f4 e0       	ldi	r31, 0x04	; 4
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcd_set_4bit+0x1a>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcd_set_4bit+0x20>
  c0:	00 00       	nop
  c2:	aa 98       	cbi	0x15, 2	; 21
  c4:	e9 ef       	ldi	r30, 0xF9	; 249
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <lcd_set_4bit+0x28>
  cc:	00 c0       	rjmp	.+0      	; 0xce <lcd_set_4bit+0x2e>
  ce:	00 00       	nop
  d0:	a8 98       	cbi	0x15, 0	; 21
  d2:	a9 98       	cbi	0x15, 1	; 21
  d4:	85 bb       	out	0x15, r24	; 21
  d6:	aa 9a       	sbi	0x15, 2	; 21
  d8:	e1 ee       	ldi	r30, 0xE1	; 225
  da:	f4 e0       	ldi	r31, 0x04	; 4
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcd_set_4bit+0x3c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <lcd_set_4bit+0x42>
  e2:	00 00       	nop
  e4:	aa 98       	cbi	0x15, 2	; 21
  e6:	e9 ef       	ldi	r30, 0xF9	; 249
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <lcd_set_4bit+0x4a>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_set_4bit+0x50>
  f0:	00 00       	nop
  f2:	a8 98       	cbi	0x15, 0	; 21
  f4:	a9 98       	cbi	0x15, 1	; 21
  f6:	85 bb       	out	0x15, r24	; 21
  f8:	aa 9a       	sbi	0x15, 2	; 21
  fa:	81 ee       	ldi	r24, 0xE1	; 225
  fc:	94 e0       	ldi	r25, 0x04	; 4
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <lcd_set_4bit+0x5e>
 102:	00 c0       	rjmp	.+0      	; 0x104 <lcd_set_4bit+0x64>
 104:	00 00       	nop
 106:	aa 98       	cbi	0x15, 2	; 21
 108:	e9 ef       	ldi	r30, 0xF9	; 249
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_set_4bit+0x6c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_set_4bit+0x72>
 112:	00 00       	nop
 114:	a8 98       	cbi	0x15, 0	; 21
 116:	a9 98       	cbi	0x15, 1	; 21
 118:	80 e2       	ldi	r24, 0x20	; 32
 11a:	85 bb       	out	0x15, r24	; 21
 11c:	aa 9a       	sbi	0x15, 2	; 21
 11e:	81 ee       	ldi	r24, 0xE1	; 225
 120:	94 e0       	ldi	r25, 0x04	; 4
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <lcd_set_4bit+0x82>
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_set_4bit+0x88>
 128:	00 00       	nop
 12a:	aa 98       	cbi	0x15, 2	; 21
 12c:	08 95       	ret

0000012e <lcd_wr_command>:
 12e:	95 b3       	in	r25, 0x15	; 21
 130:	9f 70       	andi	r25, 0x0F	; 15
 132:	95 bb       	out	0x15, r25	; 21
 134:	95 b3       	in	r25, 0x15	; 21
 136:	28 2f       	mov	r18, r24
 138:	20 7f       	andi	r18, 0xF0	; 240
 13a:	92 2b       	or	r25, r18
 13c:	95 bb       	out	0x15, r25	; 21
 13e:	a8 98       	cbi	0x15, 0	; 21
 140:	a9 98       	cbi	0x15, 1	; 21
 142:	aa 9a       	sbi	0x15, 2	; 21
 144:	e1 ee       	ldi	r30, 0xE1	; 225
 146:	f4 e0       	ldi	r31, 0x04	; 4
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcd_wr_command+0x1a>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <lcd_wr_command+0x20>
 14e:	00 00       	nop
 150:	aa 98       	cbi	0x15, 2	; 21
 152:	95 b3       	in	r25, 0x15	; 21
 154:	9f 70       	andi	r25, 0x0F	; 15
 156:	95 bb       	out	0x15, r25	; 21
 158:	95 b3       	in	r25, 0x15	; 21
 15a:	82 95       	swap	r24
 15c:	80 7f       	andi	r24, 0xF0	; 240
 15e:	89 2b       	or	r24, r25
 160:	85 bb       	out	0x15, r24	; 21
 162:	a8 98       	cbi	0x15, 0	; 21
 164:	a9 98       	cbi	0x15, 1	; 21
 166:	aa 9a       	sbi	0x15, 2	; 21
 168:	81 ee       	ldi	r24, 0xE1	; 225
 16a:	94 e0       	ldi	r25, 0x04	; 4
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_wr_command+0x3e>
 170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_wr_command+0x44>
 172:	00 00       	nop
 174:	aa 98       	cbi	0x15, 2	; 21
 176:	08 95       	ret

00000178 <lcd_init>:
 178:	89 ef       	ldi	r24, 0xF9	; 249
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <lcd_init+0x4>
 180:	00 c0       	rjmp	.+0      	; 0x182 <lcd_init+0xa>
 182:	00 00       	nop
 184:	88 e2       	ldi	r24, 0x28	; 40
 186:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_wr_command>
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_wr_command>
 190:	86 e0       	ldi	r24, 0x06	; 6
 192:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_wr_command>
 196:	8e e0       	ldi	r24, 0x0E	; 14
 198:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_wr_command>
 19c:	80 e8       	ldi	r24, 0x80	; 128
 19e:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_wr_command>
 1a2:	08 95       	ret

000001a4 <lcd_wr_char>:
 1a4:	95 b3       	in	r25, 0x15	; 21
 1a6:	9f 70       	andi	r25, 0x0F	; 15
 1a8:	95 bb       	out	0x15, r25	; 21
 1aa:	95 b3       	in	r25, 0x15	; 21
 1ac:	28 2f       	mov	r18, r24
 1ae:	20 7f       	andi	r18, 0xF0	; 240
 1b0:	92 2b       	or	r25, r18
 1b2:	95 bb       	out	0x15, r25	; 21
 1b4:	a8 9a       	sbi	0x15, 0	; 21
 1b6:	a9 98       	cbi	0x15, 1	; 21
 1b8:	aa 9a       	sbi	0x15, 2	; 21
 1ba:	e1 ee       	ldi	r30, 0xE1	; 225
 1bc:	f4 e0       	ldi	r31, 0x04	; 4
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_wr_char+0x1a>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <lcd_wr_char+0x20>
 1c4:	00 00       	nop
 1c6:	aa 98       	cbi	0x15, 2	; 21
 1c8:	95 b3       	in	r25, 0x15	; 21
 1ca:	9f 70       	andi	r25, 0x0F	; 15
 1cc:	95 bb       	out	0x15, r25	; 21
 1ce:	95 b3       	in	r25, 0x15	; 21
 1d0:	82 95       	swap	r24
 1d2:	80 7f       	andi	r24, 0xF0	; 240
 1d4:	89 2b       	or	r24, r25
 1d6:	85 bb       	out	0x15, r24	; 21
 1d8:	a8 9a       	sbi	0x15, 0	; 21
 1da:	a9 98       	cbi	0x15, 1	; 21
 1dc:	aa 9a       	sbi	0x15, 2	; 21
 1de:	81 ee       	ldi	r24, 0xE1	; 225
 1e0:	94 e0       	ldi	r25, 0x04	; 4
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_wr_char+0x3e>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_wr_char+0x44>
 1e8:	00 00       	nop
 1ea:	aa 98       	cbi	0x15, 2	; 21
 1ec:	08 95       	ret

000001ee <lcd_home>:
 1ee:	80 e8       	ldi	r24, 0x80	; 128
 1f0:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_wr_command>
 1f4:	08 95       	ret

000001f6 <lcd_string>:
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	ec 01       	movw	r28, r24
 1fc:	88 81       	ld	r24, Y
 1fe:	88 23       	and	r24, r24
 200:	31 f0       	breq	.+12     	; 0x20e <lcd_string+0x18>
 202:	21 96       	adiw	r28, 0x01	; 1
 204:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_wr_char>
 208:	89 91       	ld	r24, Y+
 20a:	81 11       	cpse	r24, r1
 20c:	fb cf       	rjmp	.-10     	; 0x204 <lcd_string+0xe>
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <lcd_cursor>:
 214:	82 30       	cpi	r24, 0x02	; 2
 216:	71 f0       	breq	.+28     	; 0x234 <lcd_cursor+0x20>
 218:	18 f4       	brcc	.+6      	; 0x220 <lcd_cursor+0xc>
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	31 f0       	breq	.+12     	; 0x22a <lcd_cursor+0x16>
 21e:	08 95       	ret
 220:	83 30       	cpi	r24, 0x03	; 3
 222:	69 f0       	breq	.+26     	; 0x23e <lcd_cursor+0x2a>
 224:	84 30       	cpi	r24, 0x04	; 4
 226:	81 f0       	breq	.+32     	; 0x248 <lcd_cursor+0x34>
 228:	08 95       	ret
 22a:	8f e7       	ldi	r24, 0x7F	; 127
 22c:	86 0f       	add	r24, r22
 22e:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_wr_command>
 232:	08 95       	ret
 234:	8f eb       	ldi	r24, 0xBF	; 191
 236:	86 0f       	add	r24, r22
 238:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_wr_command>
 23c:	08 95       	ret
 23e:	83 e9       	ldi	r24, 0x93	; 147
 240:	86 0f       	add	r24, r22
 242:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_wr_command>
 246:	08 95       	ret
 248:	83 ed       	ldi	r24, 0xD3	; 211
 24a:	86 0f       	add	r24, r22
 24c:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_wr_command>
 250:	08 95       	ret

00000252 <lcd_print>:
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	8a 01       	movw	r16, r20
 25c:	e9 01       	movw	r28, r18
 25e:	88 23       	and	r24, r24
 260:	11 f0       	breq	.+4      	; 0x266 <lcd_print+0x14>
 262:	61 11       	cpse	r22, r1
 264:	03 c0       	rjmp	.+6      	; 0x26c <lcd_print+0x1a>
 266:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_home>
 26a:	02 c0       	rjmp	.+4      	; 0x270 <lcd_print+0x1e>
 26c:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_cursor>
 270:	c5 30       	cpi	r28, 0x05	; 5
 272:	d1 05       	cpc	r29, r1
 274:	c9 f4       	brne	.+50     	; 0x2a8 <lcd_print+0x56>
 276:	98 01       	movw	r18, r16
 278:	32 95       	swap	r19
 27a:	22 95       	swap	r18
 27c:	2f 70       	andi	r18, 0x0F	; 15
 27e:	23 27       	eor	r18, r19
 280:	3f 70       	andi	r19, 0x0F	; 15
 282:	23 27       	eor	r18, r19
 284:	a7 e4       	ldi	r26, 0x47	; 71
 286:	b3 e0       	ldi	r27, 0x03	; 3
 288:	0e 94 88 05 	call	0xb10	; 0xb10 <__umulhisi3>
 28c:	96 95       	lsr	r25
 28e:	87 95       	ror	r24
 290:	96 95       	lsr	r25
 292:	87 95       	ror	r24
 294:	96 95       	lsr	r25
 296:	87 95       	ror	r24
 298:	c0 96       	adiw	r24, 0x30	; 48
 29a:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <million+0x1>
 29e:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <million>
 2a2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_wr_char>
 2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <lcd_print+0x5e>
 2a8:	c4 30       	cpi	r28, 0x04	; 4
 2aa:	d1 05       	cpc	r29, r1
 2ac:	09 f0       	breq	.+2      	; 0x2b0 <lcd_print+0x5e>
 2ae:	c3 c0       	rjmp	.+390    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 2b0:	98 01       	movw	r18, r16
 2b2:	36 95       	lsr	r19
 2b4:	27 95       	ror	r18
 2b6:	36 95       	lsr	r19
 2b8:	27 95       	ror	r18
 2ba:	36 95       	lsr	r19
 2bc:	27 95       	ror	r18
 2be:	a5 ec       	ldi	r26, 0xC5	; 197
 2c0:	b0 e2       	ldi	r27, 0x20	; 32
 2c2:	0e 94 88 05 	call	0xb10	; 0xb10 <__umulhisi3>
 2c6:	ac 01       	movw	r20, r24
 2c8:	52 95       	swap	r21
 2ca:	42 95       	swap	r20
 2cc:	4f 70       	andi	r20, 0x0F	; 15
 2ce:	45 27       	eor	r20, r21
 2d0:	5f 70       	andi	r21, 0x0F	; 15
 2d2:	45 27       	eor	r20, r21
 2d4:	50 93 93 00 	sts	0x0093, r21	; 0x800093 <temp+0x1>
 2d8:	40 93 92 00 	sts	0x0092, r20	; 0x800092 <temp>
 2dc:	9a 01       	movw	r18, r20
 2de:	ad ec       	ldi	r26, 0xCD	; 205
 2e0:	bc ec       	ldi	r27, 0xCC	; 204
 2e2:	0e 94 88 05 	call	0xb10	; 0xb10 <__umulhisi3>
 2e6:	96 95       	lsr	r25
 2e8:	87 95       	ror	r24
 2ea:	96 95       	lsr	r25
 2ec:	87 95       	ror	r24
 2ee:	96 95       	lsr	r25
 2f0:	87 95       	ror	r24
 2f2:	9c 01       	movw	r18, r24
 2f4:	22 0f       	add	r18, r18
 2f6:	33 1f       	adc	r19, r19
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	82 0f       	add	r24, r18
 306:	93 1f       	adc	r25, r19
 308:	9a 01       	movw	r18, r20
 30a:	28 1b       	sub	r18, r24
 30c:	39 0b       	sbc	r19, r25
 30e:	c9 01       	movw	r24, r18
 310:	c0 96       	adiw	r24, 0x30	; 48
 312:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <thousand+0x1>
 316:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <thousand>
 31a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_wr_char>
 31e:	98 01       	movw	r18, r16
 320:	36 95       	lsr	r19
 322:	27 95       	ror	r18
 324:	36 95       	lsr	r19
 326:	27 95       	ror	r18
 328:	ab e7       	ldi	r26, 0x7B	; 123
 32a:	b4 e1       	ldi	r27, 0x14	; 20
 32c:	0e 94 88 05 	call	0xb10	; 0xb10 <__umulhisi3>
 330:	ac 01       	movw	r20, r24
 332:	56 95       	lsr	r21
 334:	47 95       	ror	r20
 336:	50 93 93 00 	sts	0x0093, r21	; 0x800093 <temp+0x1>
 33a:	40 93 92 00 	sts	0x0092, r20	; 0x800092 <temp>
 33e:	9a 01       	movw	r18, r20
 340:	ad ec       	ldi	r26, 0xCD	; 205
 342:	bc ec       	ldi	r27, 0xCC	; 204
 344:	0e 94 88 05 	call	0xb10	; 0xb10 <__umulhisi3>
 348:	96 95       	lsr	r25
 34a:	87 95       	ror	r24
 34c:	96 95       	lsr	r25
 34e:	87 95       	ror	r24
 350:	96 95       	lsr	r25
 352:	87 95       	ror	r24
 354:	9c 01       	movw	r18, r24
 356:	22 0f       	add	r18, r18
 358:	33 1f       	adc	r19, r19
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	82 0f       	add	r24, r18
 368:	93 1f       	adc	r25, r19
 36a:	9a 01       	movw	r18, r20
 36c:	28 1b       	sub	r18, r24
 36e:	39 0b       	sbc	r19, r25
 370:	c9 01       	movw	r24, r18
 372:	c0 96       	adiw	r24, 0x30	; 48
 374:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <hundred+0x1>
 378:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <hundred>
 37c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_wr_char>
 380:	04 c0       	rjmp	.+8      	; 0x38a <lcd_print+0x138>
 382:	c2 30       	cpi	r28, 0x02	; 2
 384:	d1 05       	cpc	r29, r1
 386:	09 f0       	breq	.+2      	; 0x38a <lcd_print+0x138>
 388:	5b c0       	rjmp	.+182    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 38a:	98 01       	movw	r18, r16
 38c:	ad ec       	ldi	r26, 0xCD	; 205
 38e:	bc ec       	ldi	r27, 0xCC	; 204
 390:	0e 94 88 05 	call	0xb10	; 0xb10 <__umulhisi3>
 394:	ac 01       	movw	r20, r24
 396:	56 95       	lsr	r21
 398:	47 95       	ror	r20
 39a:	56 95       	lsr	r21
 39c:	47 95       	ror	r20
 39e:	56 95       	lsr	r21
 3a0:	47 95       	ror	r20
 3a2:	50 93 93 00 	sts	0x0093, r21	; 0x800093 <temp+0x1>
 3a6:	40 93 92 00 	sts	0x0092, r20	; 0x800092 <temp>
 3aa:	9a 01       	movw	r18, r20
 3ac:	0e 94 88 05 	call	0xb10	; 0xb10 <__umulhisi3>
 3b0:	96 95       	lsr	r25
 3b2:	87 95       	ror	r24
 3b4:	96 95       	lsr	r25
 3b6:	87 95       	ror	r24
 3b8:	96 95       	lsr	r25
 3ba:	87 95       	ror	r24
 3bc:	9c 01       	movw	r18, r24
 3be:	22 0f       	add	r18, r18
 3c0:	33 1f       	adc	r19, r19
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	82 0f       	add	r24, r18
 3d0:	93 1f       	adc	r25, r19
 3d2:	9a 01       	movw	r18, r20
 3d4:	28 1b       	sub	r18, r24
 3d6:	39 0b       	sbc	r19, r25
 3d8:	c9 01       	movw	r24, r18
 3da:	c0 96       	adiw	r24, 0x30	; 48
 3dc:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <tens+0x1>
 3e0:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <tens>
 3e4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_wr_char>
 3e8:	98 01       	movw	r18, r16
 3ea:	ad ec       	ldi	r26, 0xCD	; 205
 3ec:	bc ec       	ldi	r27, 0xCC	; 204
 3ee:	0e 94 88 05 	call	0xb10	; 0xb10 <__umulhisi3>
 3f2:	96 95       	lsr	r25
 3f4:	87 95       	ror	r24
 3f6:	96 95       	lsr	r25
 3f8:	87 95       	ror	r24
 3fa:	96 95       	lsr	r25
 3fc:	87 95       	ror	r24
 3fe:	9c 01       	movw	r18, r24
 400:	22 0f       	add	r18, r18
 402:	33 1f       	adc	r19, r19
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	82 0f       	add	r24, r18
 412:	93 1f       	adc	r25, r19
 414:	98 01       	movw	r18, r16
 416:	28 1b       	sub	r18, r24
 418:	39 0b       	sbc	r19, r25
 41a:	c9 01       	movw	r24, r18
 41c:	c0 96       	adiw	r24, 0x30	; 48
 41e:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <unit+0x1>
 422:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <unit>
 426:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_wr_char>
 42a:	26 97       	sbiw	r28, 0x06	; 6
 42c:	6c f0       	brlt	.+26     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 42e:	85 e4       	ldi	r24, 0x45	; 69
 430:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_wr_char>
 434:	09 c0       	rjmp	.+18     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 436:	c3 30       	cpi	r28, 0x03	; 3
 438:	d1 05       	cpc	r29, r1
 43a:	09 f0       	breq	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43c:	a2 cf       	rjmp	.-188    	; 0x382 <lcd_print+0x130>
 43e:	6f cf       	rjmp	.-290    	; 0x31e <lcd_print+0xcc>
 440:	c1 30       	cpi	r28, 0x01	; 1
 442:	d1 05       	cpc	r29, r1
 444:	91 f7       	brne	.-28     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 446:	d0 cf       	rjmp	.-96     	; 0x3e8 <lcd_print+0x196>
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	1f 91       	pop	r17
 44e:	0f 91       	pop	r16
 450:	08 95       	ret

00000452 <velocity>:
 452:	1b bc       	out	0x2b, r1	; 43
 454:	8a bd       	out	0x2a, r24	; 42
 456:	19 bc       	out	0x29, r1	; 41
 458:	68 bd       	out	0x28, r22	; 40
 45a:	08 95       	ret

0000045c <motion_pin_config>:
 45c:	87 b3       	in	r24, 0x17	; 23
 45e:	8f 60       	ori	r24, 0x0F	; 15
 460:	87 bb       	out	0x17, r24	; 23
 462:	88 b3       	in	r24, 0x18	; 24
 464:	80 7f       	andi	r24, 0xF0	; 240
 466:	88 bb       	out	0x18, r24	; 24
 468:	81 b3       	in	r24, 0x11	; 17
 46a:	80 63       	ori	r24, 0x30	; 48
 46c:	81 bb       	out	0x11, r24	; 17
 46e:	82 b3       	in	r24, 0x12	; 18
 470:	80 63       	ori	r24, 0x30	; 48
 472:	82 bb       	out	0x12, r24	; 18
 474:	08 95       	ret

00000476 <motion_set>:
 476:	98 b3       	in	r25, 0x18	; 24
 478:	90 7f       	andi	r25, 0xF0	; 240
 47a:	8f 70       	andi	r24, 0x0F	; 15
 47c:	98 2b       	or	r25, r24
 47e:	98 bb       	out	0x18, r25	; 24
 480:	08 95       	ret

00000482 <forward>:
 482:	86 e0       	ldi	r24, 0x06	; 6
 484:	0e 94 3b 02 	call	0x476	; 0x476 <motion_set>
 488:	08 95       	ret

0000048a <adc_init>:
//Function to Initialize ADC
void adc_init()
{
	ADCSRA = 0x00;
 48a:	16 b8       	out	0x06, r1	; 6
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 48c:	80 e2       	ldi	r24, 0x20	; 32
 48e:	87 b9       	out	0x07, r24	; 7
	ACSR = 0x80;
 490:	80 e8       	ldi	r24, 0x80	; 128
 492:	88 b9       	out	0x08, r24	; 8
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 494:	86 e8       	ldi	r24, 0x86	; 134
 496:	86 b9       	out	0x06, r24	; 6
 498:	08 95       	ret

0000049a <adc_pin_config>:
}

//ADC pin configuration
void adc_pin_config (void)
{
	DDRA = 0x00;   //set PORTF direction as input
 49a:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x00;  //set PORTF pins floating
 49c:	1b ba       	out	0x1b, r1	; 27
 49e:	08 95       	ret

000004a0 <ADC_Conversion>:

//This Function accepts the Channel Number and returns the corresponding Analog Value
unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	Ch = Ch & 0x07;
 4a0:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;
 4a2:	80 62       	ori	r24, 0x20	; 32
 4a4:	87 b9       	out	0x07, r24	; 7
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 4a6:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
 4a8:	34 9b       	sbis	0x06, 4	; 6
 4aa:	fe cf       	rjmp	.-4      	; 0x4a8 <ADC_Conversion+0x8>
	a=ADCH;
 4ac:	85 b1       	in	r24, 0x05	; 5
	ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 4ae:	34 9a       	sbi	0x06, 4	; 6
	return a;
}
 4b0:	08 95       	ret

000004b2 <timer1_init>:
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// desired value: 450Hz
// actual value: 450.000Hz (0.0%)
void timer1_init(void)
{
	TCCR1B = 0x00; //stop
 4b2:	1e bc       	out	0x2e, r1	; 46
	TCNT1H = 0xFF; //setup
 4b4:	8f ef       	ldi	r24, 0xFF	; 255
 4b6:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0x01;
 4b8:	91 e0       	ldi	r25, 0x01	; 1
 4ba:	9c bd       	out	0x2c, r25	; 44
	OCR1AH = 0x00;
 4bc:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = 0xFF;
 4be:	8a bd       	out	0x2a, r24	; 42
	OCR1BH = 0x00;
 4c0:	19 bc       	out	0x29, r1	; 41
	OCR1BL = 0xFF;
 4c2:	88 bd       	out	0x28, r24	; 40
	ICR1H  = 0x00;
 4c4:	17 bc       	out	0x27, r1	; 39
	ICR1L  = 0xFF;
 4c6:	86 bd       	out	0x26, r24	; 38
	TCCR1A = 0xA1;
 4c8:	81 ea       	ldi	r24, 0xA1	; 161
 4ca:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x0D; //start Timer
 4cc:	8d e0       	ldi	r24, 0x0D	; 13
 4ce:	8e bd       	out	0x2e, r24	; 46
 4d0:	08 95       	ret

000004d2 <init>:
}

void init()
{
	cli();					// Clears the global interrupts
 4d2:	f8 94       	cli
	lcd_port_config();
 4d4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_port_config>
	adc_init();
 4d8:	0e 94 45 02 	call	0x48a	; 0x48a <adc_init>
	adc_pin_config();
 4dc:	0e 94 4d 02 	call	0x49a	; 0x49a <adc_pin_config>
	timer1_init();
 4e0:	0e 94 59 02 	call	0x4b2	; 0x4b2 <timer1_init>
	motion_pin_config();	// Refer the function
 4e4:	0e 94 2e 02 	call	0x45c	; 0x45c <motion_pin_config>
	sei();					// Enables the global interrupts
 4e8:	78 94       	sei
	lcd_set_4bit();			// Setting the LCD to 4 bit mode
 4ea:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_set_4bit>
	lcd_init();
 4ee:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_init>
 4f2:	08 95       	ret

000004f4 <compute_error>:

// Used for defining the error function
//	Uses global values of the ADC values and outputs in the global "error" variable
void compute_error(void)
{
	leftLine = leftLine>>2;
 4f4:	40 91 91 00 	lds	r20, 0x0091	; 0x800091 <leftLine>
 4f8:	46 95       	lsr	r20
 4fa:	46 95       	lsr	r20
 4fc:	40 93 91 00 	sts	0x0091, r20	; 0x800091 <leftLine>
	rightLine = rightLine>>2;
 500:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <rightLine>
 504:	86 95       	lsr	r24
 506:	86 95       	lsr	r24
 508:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <rightLine>
	centerLine = centerLine>>2;
 50c:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <centerLine>
 510:	26 95       	lsr	r18
 512:	26 95       	lsr	r18
 514:	20 93 8e 00 	sts	0x008E, r18	; 0x80008e <centerLine>

	if( centerLine <= leftLine ){
 518:	42 17       	cp	r20, r18
 51a:	c0 f0       	brcs	.+48     	; 0x54c <compute_error+0x58>
		error =  - centerLine + leftLine;
	}
	if ( centerLine <= rightLine ||  centerLine <= leftLine ){
		error = -(((rightLine - centerLine) < (- centerLine + leftLine)) ? (- centerLine + leftLine) : (- rightLine + centerLine));
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	82 1b       	sub	r24, r18
 522:	93 0b       	sbc	r25, r19
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	ba 01       	movw	r22, r20
 528:	62 1b       	sub	r22, r18
 52a:	73 0b       	sbc	r23, r19
 52c:	86 17       	cp	r24, r22
 52e:	97 07       	cpc	r25, r23
 530:	1c f4       	brge	.+6      	; 0x538 <compute_error+0x44>
 532:	c9 01       	movw	r24, r18
 534:	84 1b       	sub	r24, r20
 536:	95 0b       	sbc	r25, r21
 538:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <error+0x1>
 53c:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <error>
 540:	08 95       	ret
	}
	else
		error = 0;
 542:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <error+0x1>
 546:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <error>
 54a:	08 95       	ret
	centerLine = centerLine>>2;

	if( centerLine <= leftLine ){
		error =  - centerLine + leftLine;
	}
	if ( centerLine <= rightLine ||  centerLine <= leftLine ){
 54c:	82 17       	cp	r24, r18
 54e:	30 f7       	brcc	.-52     	; 0x51c <compute_error+0x28>
 550:	f8 cf       	rjmp	.-16     	; 0x542 <compute_error+0x4e>

00000552 <motor_control>:
	//error = /*30 - centerLine + */- leftLine + rightLine;
}

// Used for controlling the motors depending on the value of the "pid" variable
void motor_control(void)
{
 552:	cf 92       	push	r12
 554:	df 92       	push	r13
 556:	ef 92       	push	r14
 558:	ff 92       	push	r15
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
	char velR, velL;
	if(pid > 0) {
 55e:	c0 90 82 00 	lds	r12, 0x0082	; 0x800082 <__data_end>
 562:	d0 90 83 00 	lds	r13, 0x0083	; 0x800083 <__data_end+0x1>
 566:	e0 90 84 00 	lds	r14, 0x0084	; 0x800084 <__data_end+0x2>
 56a:	f0 90 85 00 	lds	r15, 0x0085	; 0x800085 <__data_end+0x3>
 56e:	20 e0       	ldi	r18, 0x00	; 0
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	a9 01       	movw	r20, r18
 574:	c7 01       	movw	r24, r14
 576:	b6 01       	movw	r22, r12
 578:	0e 94 16 05 	call	0xa2c	; 0xa2c <__gesf2>
 57c:	18 16       	cp	r1, r24
 57e:	94 f4       	brge	.+36     	; 0x5a4 <motor_control+0x52>
		velR = /*0 */MAX_SPEED / 2 - max(min(pid, MAX_SPEED/2), 0);
 580:	c7 01       	movw	r24, r14
 582:	b6 01       	movw	r22, r12
 584:	0e 94 2e 04 	call	0x85c	; 0x85c <__fixsfsi>
float Kp = 5;
float Ki = 0.1;
float Kd = -10;

int min(int a, int b){
	return (a < b) ? a : b;
 588:	63 33       	cpi	r22, 0x33	; 51
 58a:	71 05       	cpc	r23, r1
 58c:	14 f0       	brlt	.+4      	; 0x592 <motor_control+0x40>
 58e:	62 e3       	ldi	r22, 0x32	; 50
 590:	70 e0       	ldi	r23, 0x00	; 0
}

int max(int a, int b){
	return (a > b) ? a : b;
 592:	77 23       	and	r23, r23
 594:	14 f4       	brge	.+4      	; 0x59a <motor_control+0x48>
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	70 e0       	ldi	r23, 0x00	; 0
// Used for controlling the motors depending on the value of the "pid" variable
void motor_control(void)
{
	char velR, velL;
	if(pid > 0) {
		velR = /*0 */MAX_SPEED / 2 - max(min(pid, MAX_SPEED/2), 0);
 59a:	42 e3       	ldi	r20, 0x32	; 50
 59c:	c4 2f       	mov	r28, r20
 59e:	c6 1b       	sub	r28, r22
		velL = MAX_SPEED / 2;
 5a0:	d2 e3       	ldi	r29, 0x32	; 50
 5a2:	20 c0       	rjmp	.+64     	; 0x5e4 <motor_control+0x92>
	}
	else if (pid < 0) {
 5a4:	20 e0       	ldi	r18, 0x00	; 0
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	a9 01       	movw	r20, r18
 5aa:	c7 01       	movw	r24, r14
 5ac:	b6 01       	movw	r22, r12
 5ae:	0e 94 29 04 	call	0x852	; 0x852 <__cmpsf2>
 5b2:	88 23       	and	r24, r24
 5b4:	9c f4       	brge	.+38     	; 0x5dc <motor_control+0x8a>
		velR = MAX_SPEED / 2;
		velL = /*0 */MAX_SPEED / 2 - max(min( - pid, MAX_SPEED/2), 0);
 5b6:	c7 01       	movw	r24, r14
 5b8:	b6 01       	movw	r22, r12
 5ba:	90 58       	subi	r25, 0x80	; 128
 5bc:	0e 94 2e 04 	call	0x85c	; 0x85c <__fixsfsi>
float Kp = 5;
float Ki = 0.1;
float Kd = -10;

int min(int a, int b){
	return (a < b) ? a : b;
 5c0:	63 33       	cpi	r22, 0x33	; 51
 5c2:	71 05       	cpc	r23, r1
 5c4:	14 f0       	brlt	.+4      	; 0x5ca <motor_control+0x78>
 5c6:	62 e3       	ldi	r22, 0x32	; 50
 5c8:	70 e0       	ldi	r23, 0x00	; 0
}

int max(int a, int b){
	return (a > b) ? a : b;
 5ca:	77 23       	and	r23, r23
 5cc:	14 f4       	brge	.+4      	; 0x5d2 <motor_control+0x80>
 5ce:	60 e0       	ldi	r22, 0x00	; 0
 5d0:	70 e0       	ldi	r23, 0x00	; 0
		velR = /*0 */MAX_SPEED / 2 - max(min(pid, MAX_SPEED/2), 0);
		velL = MAX_SPEED / 2;
	}
	else if (pid < 0) {
		velR = MAX_SPEED / 2;
		velL = /*0 */MAX_SPEED / 2 - max(min( - pid, MAX_SPEED/2), 0);
 5d2:	42 e3       	ldi	r20, 0x32	; 50
 5d4:	d4 2f       	mov	r29, r20
 5d6:	d6 1b       	sub	r29, r22
	if(pid > 0) {
		velR = /*0 */MAX_SPEED / 2 - max(min(pid, MAX_SPEED/2), 0);
		velL = MAX_SPEED / 2;
	}
	else if (pid < 0) {
		velR = MAX_SPEED / 2;
 5d8:	c2 e3       	ldi	r28, 0x32	; 50
 5da:	04 c0       	rjmp	.+8      	; 0x5e4 <motor_control+0x92>
		velL = /*0 */MAX_SPEED / 2 - max(min( - pid, MAX_SPEED/2), 0);
	}
	else {
		velR = velocity_right;
 5dc:	c0 91 6e 00 	lds	r28, 0x006E	; 0x80006e <velocity_right>
		velL = velocity_left;
 5e0:	d0 91 6c 00 	lds	r29, 0x006C	; 0x80006c <velocity_left>
	}
	velocity(velL,velR);
 5e4:	6c 2f       	mov	r22, r28
 5e6:	8d 2f       	mov	r24, r29
 5e8:	0e 94 29 02 	call	0x452	; 0x452 <velocity>
	lcd_print(2,1,velL,3);
 5ec:	4d 2f       	mov	r20, r29
 5ee:	50 e0       	ldi	r21, 0x00	; 0
 5f0:	23 e0       	ldi	r18, 0x03	; 3
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	61 e0       	ldi	r22, 0x01	; 1
 5f6:	82 e0       	ldi	r24, 0x02	; 2
 5f8:	0e 94 29 01 	call	0x252	; 0x252 <lcd_print>
	lcd_print(2,5,velR,3);
 5fc:	4c 2f       	mov	r20, r28
 5fe:	50 e0       	ldi	r21, 0x00	; 0
 600:	23 e0       	ldi	r18, 0x03	; 3
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	65 e0       	ldi	r22, 0x05	; 5
 606:	82 e0       	ldi	r24, 0x02	; 2
 608:	0e 94 29 01 	call	0x252	; 0x252 <lcd_print>

}
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	ff 90       	pop	r15
 612:	ef 90       	pop	r14
 614:	df 90       	pop	r13
 616:	cf 90       	pop	r12
 618:	08 95       	ret

0000061a <main>:

int main(void)
{
	init();
 61a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <init>
	lcd_string("Starting SPARK V");
 61e:	80 e7       	ldi	r24, 0x70	; 112
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 626:	2f e3       	ldi	r18, 0x3F	; 63
 628:	8d e0       	ldi	r24, 0x0D	; 13
 62a:	93 e0       	ldi	r25, 0x03	; 3
 62c:	21 50       	subi	r18, 0x01	; 1
 62e:	80 40       	sbci	r24, 0x00	; 0
 630:	90 40       	sbci	r25, 0x00	; 0
 632:	e1 f7       	brne	.-8      	; 0x62c <main+0x12>
 634:	00 c0       	rjmp	.+0      	; 0x636 <main+0x1c>
 636:	00 00       	nop
	_delay_ms(1000);
	lcd_init();
 638:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_init>
	forward();
 63c:	0e 94 41 02 	call	0x482	; 0x482 <forward>
	velocity((char)velocity_left,(char)velocity_right);
 640:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <velocity_right>
 644:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <velocity_left>
 648:	0e 94 29 02 	call	0x452	; 0x452 <velocity>
	while(1)
	{
		leftLine = ADC_Conversion(3);
 64c:	83 e0       	ldi	r24, 0x03	; 3
 64e:	0e 94 50 02 	call	0x4a0	; 0x4a0 <ADC_Conversion>
 652:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <leftLine>
		centerLine = ADC_Conversion(4);
 656:	84 e0       	ldi	r24, 0x04	; 4
 658:	0e 94 50 02 	call	0x4a0	; 0x4a0 <ADC_Conversion>
 65c:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <centerLine>
		rightLine = ADC_Conversion(5);
 660:	85 e0       	ldi	r24, 0x05	; 5
 662:	0e 94 50 02 	call	0x4a0	; 0x4a0 <ADC_Conversion>
 666:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <rightLine>
		compute_error();
 66a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <compute_error>
		lcd_print(1,1,leftLine,3);
 66e:	40 91 91 00 	lds	r20, 0x0091	; 0x800091 <leftLine>
 672:	50 e0       	ldi	r21, 0x00	; 0
 674:	23 e0       	ldi	r18, 0x03	; 3
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	61 e0       	ldi	r22, 0x01	; 1
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	0e 94 29 01 	call	0x252	; 0x252 <lcd_print>
		lcd_print(1,5,centerLine,3);
 680:	40 91 8e 00 	lds	r20, 0x008E	; 0x80008e <centerLine>
 684:	50 e0       	ldi	r21, 0x00	; 0
 686:	23 e0       	ldi	r18, 0x03	; 3
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	65 e0       	ldi	r22, 0x05	; 5
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	0e 94 29 01 	call	0x252	; 0x252 <lcd_print>
		lcd_print(1,9,rightLine,3);
 692:	40 91 94 00 	lds	r20, 0x0094	; 0x800094 <rightLine>
 696:	50 e0       	ldi	r21, 0x00	; 0
 698:	23 e0       	ldi	r18, 0x03	; 3
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	69 e0       	ldi	r22, 0x09	; 9
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	0e 94 29 01 	call	0x252	; 0x252 <lcd_print>
		// Till now we would have the value of the error

		/****************************** P.I.D. ******************************/
		integral_error = integral_error + error;
 6a4:	c0 91 8c 00 	lds	r28, 0x008C	; 0x80008c <error>
 6a8:	d0 91 8d 00 	lds	r29, 0x008D	; 0x80008d <error+0x1>
 6ac:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <integral_error>
 6b0:	50 91 89 00 	lds	r21, 0x0089	; 0x800089 <integral_error+0x1>
 6b4:	8e 01       	movw	r16, r28
 6b6:	04 0f       	add	r16, r20
 6b8:	15 1f       	adc	r17, r21
 6ba:	10 93 89 00 	sts	0x0089, r17	; 0x800089 <integral_error+0x1>
 6be:	00 93 88 00 	sts	0x0088, r16	; 0x800088 <integral_error>
		diff_error = error - prev_error;
 6c2:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <prev_error>
 6c6:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <prev_error+0x1>
 6ca:	7e 01       	movw	r14, r28
 6cc:	e8 1a       	sub	r14, r24
 6ce:	f9 0a       	sbc	r15, r25
 6d0:	f0 92 87 00 	sts	0x0087, r15	; 0x800087 <diff_error+0x1>
 6d4:	e0 92 86 00 	sts	0x0086, r14	; 0x800086 <diff_error>
		pid = Kp*error + Ki*integral_error + Kd*diff_error;
 6d8:	be 01       	movw	r22, r28
 6da:	0d 2e       	mov	r0, r29
 6dc:	00 0c       	add	r0, r0
 6de:	88 0b       	sbc	r24, r24
 6e0:	99 0b       	sbc	r25, r25
 6e2:	0e 94 66 04 	call	0x8cc	; 0x8cc <__floatsisf>
 6e6:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <Kp>
 6ea:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <Kp+0x1>
 6ee:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <Kp+0x2>
 6f2:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <Kp+0x3>
 6f6:	0e 94 1b 05 	call	0xa36	; 0xa36 <__mulsf3>
 6fa:	4b 01       	movw	r8, r22
 6fc:	5c 01       	movw	r10, r24
 6fe:	b8 01       	movw	r22, r16
 700:	11 0f       	add	r17, r17
 702:	88 0b       	sbc	r24, r24
 704:	99 0b       	sbc	r25, r25
 706:	0e 94 66 04 	call	0x8cc	; 0x8cc <__floatsisf>
 70a:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <Ki>
 70e:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <Ki+0x1>
 712:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <Ki+0x2>
 716:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <Ki+0x3>
 71a:	0e 94 1b 05 	call	0xa36	; 0xa36 <__mulsf3>
 71e:	9b 01       	movw	r18, r22
 720:	ac 01       	movw	r20, r24
 722:	c5 01       	movw	r24, r10
 724:	b4 01       	movw	r22, r8
 726:	0e 94 bd 03 	call	0x77a	; 0x77a <__addsf3>
 72a:	4b 01       	movw	r8, r22
 72c:	5c 01       	movw	r10, r24
 72e:	b7 01       	movw	r22, r14
 730:	ff 0c       	add	r15, r15
 732:	88 0b       	sbc	r24, r24
 734:	99 0b       	sbc	r25, r25
 736:	0e 94 66 04 	call	0x8cc	; 0x8cc <__floatsisf>
 73a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <Kd>
 73e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <Kd+0x1>
 742:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <Kd+0x2>
 746:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <Kd+0x3>
 74a:	0e 94 1b 05 	call	0xa36	; 0xa36 <__mulsf3>
 74e:	9b 01       	movw	r18, r22
 750:	ac 01       	movw	r20, r24
 752:	c5 01       	movw	r24, r10
 754:	b4 01       	movw	r22, r8
 756:	0e 94 bd 03 	call	0x77a	; 0x77a <__addsf3>
 75a:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <__data_end>
 75e:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <__data_end+0x1>
 762:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end+0x2>
 766:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__data_end+0x3>
		prev_error = error;
 76a:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <prev_error+0x1>
 76e:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <prev_error>
		/****************************** P.I.D. ******************************/
		motor_control();
 772:	0e 94 a9 02 	call	0x552	; 0x552 <motor_control>
		//_delay_ms(10);
	}
 776:	6a cf       	rjmp	.-300    	; 0x64c <main+0x32>

00000778 <__subsf3>:
 778:	50 58       	subi	r21, 0x80	; 128

0000077a <__addsf3>:
 77a:	bb 27       	eor	r27, r27
 77c:	aa 27       	eor	r26, r26
 77e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__addsf3x>
 782:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__fp_round>
 786:	0e 94 ce 04 	call	0x99c	; 0x99c <__fp_pscA>
 78a:	38 f0       	brcs	.+14     	; 0x79a <__addsf3+0x20>
 78c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__fp_pscB>
 790:	20 f0       	brcs	.+8      	; 0x79a <__addsf3+0x20>
 792:	39 f4       	brne	.+14     	; 0x7a2 <__addsf3+0x28>
 794:	9f 3f       	cpi	r25, 0xFF	; 255
 796:	19 f4       	brne	.+6      	; 0x79e <__addsf3+0x24>
 798:	26 f4       	brtc	.+8      	; 0x7a2 <__addsf3+0x28>
 79a:	0c 94 cb 04 	jmp	0x996	; 0x996 <__fp_nan>
 79e:	0e f4       	brtc	.+2      	; 0x7a2 <__addsf3+0x28>
 7a0:	e0 95       	com	r30
 7a2:	e7 fb       	bst	r30, 7
 7a4:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__fp_inf>

000007a8 <__addsf3x>:
 7a8:	e9 2f       	mov	r30, r25
 7aa:	0e 94 ed 04 	call	0x9da	; 0x9da <__fp_split3>
 7ae:	58 f3       	brcs	.-42     	; 0x786 <__addsf3+0xc>
 7b0:	ba 17       	cp	r27, r26
 7b2:	62 07       	cpc	r22, r18
 7b4:	73 07       	cpc	r23, r19
 7b6:	84 07       	cpc	r24, r20
 7b8:	95 07       	cpc	r25, r21
 7ba:	20 f0       	brcs	.+8      	; 0x7c4 <__addsf3x+0x1c>
 7bc:	79 f4       	brne	.+30     	; 0x7dc <__addsf3x+0x34>
 7be:	a6 f5       	brtc	.+104    	; 0x828 <__addsf3x+0x80>
 7c0:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_zero>
 7c4:	0e f4       	brtc	.+2      	; 0x7c8 <__addsf3x+0x20>
 7c6:	e0 95       	com	r30
 7c8:	0b 2e       	mov	r0, r27
 7ca:	ba 2f       	mov	r27, r26
 7cc:	a0 2d       	mov	r26, r0
 7ce:	0b 01       	movw	r0, r22
 7d0:	b9 01       	movw	r22, r18
 7d2:	90 01       	movw	r18, r0
 7d4:	0c 01       	movw	r0, r24
 7d6:	ca 01       	movw	r24, r20
 7d8:	a0 01       	movw	r20, r0
 7da:	11 24       	eor	r1, r1
 7dc:	ff 27       	eor	r31, r31
 7de:	59 1b       	sub	r21, r25
 7e0:	99 f0       	breq	.+38     	; 0x808 <__addsf3x+0x60>
 7e2:	59 3f       	cpi	r21, 0xF9	; 249
 7e4:	50 f4       	brcc	.+20     	; 0x7fa <__addsf3x+0x52>
 7e6:	50 3e       	cpi	r21, 0xE0	; 224
 7e8:	68 f1       	brcs	.+90     	; 0x844 <__addsf3x+0x9c>
 7ea:	1a 16       	cp	r1, r26
 7ec:	f0 40       	sbci	r31, 0x00	; 0
 7ee:	a2 2f       	mov	r26, r18
 7f0:	23 2f       	mov	r18, r19
 7f2:	34 2f       	mov	r19, r20
 7f4:	44 27       	eor	r20, r20
 7f6:	58 5f       	subi	r21, 0xF8	; 248
 7f8:	f3 cf       	rjmp	.-26     	; 0x7e0 <__addsf3x+0x38>
 7fa:	46 95       	lsr	r20
 7fc:	37 95       	ror	r19
 7fe:	27 95       	ror	r18
 800:	a7 95       	ror	r26
 802:	f0 40       	sbci	r31, 0x00	; 0
 804:	53 95       	inc	r21
 806:	c9 f7       	brne	.-14     	; 0x7fa <__addsf3x+0x52>
 808:	7e f4       	brtc	.+30     	; 0x828 <__addsf3x+0x80>
 80a:	1f 16       	cp	r1, r31
 80c:	ba 0b       	sbc	r27, r26
 80e:	62 0b       	sbc	r22, r18
 810:	73 0b       	sbc	r23, r19
 812:	84 0b       	sbc	r24, r20
 814:	ba f0       	brmi	.+46     	; 0x844 <__addsf3x+0x9c>
 816:	91 50       	subi	r25, 0x01	; 1
 818:	a1 f0       	breq	.+40     	; 0x842 <__addsf3x+0x9a>
 81a:	ff 0f       	add	r31, r31
 81c:	bb 1f       	adc	r27, r27
 81e:	66 1f       	adc	r22, r22
 820:	77 1f       	adc	r23, r23
 822:	88 1f       	adc	r24, r24
 824:	c2 f7       	brpl	.-16     	; 0x816 <__addsf3x+0x6e>
 826:	0e c0       	rjmp	.+28     	; 0x844 <__addsf3x+0x9c>
 828:	ba 0f       	add	r27, r26
 82a:	62 1f       	adc	r22, r18
 82c:	73 1f       	adc	r23, r19
 82e:	84 1f       	adc	r24, r20
 830:	48 f4       	brcc	.+18     	; 0x844 <__addsf3x+0x9c>
 832:	87 95       	ror	r24
 834:	77 95       	ror	r23
 836:	67 95       	ror	r22
 838:	b7 95       	ror	r27
 83a:	f7 95       	ror	r31
 83c:	9e 3f       	cpi	r25, 0xFE	; 254
 83e:	08 f0       	brcs	.+2      	; 0x842 <__addsf3x+0x9a>
 840:	b0 cf       	rjmp	.-160    	; 0x7a2 <__addsf3+0x28>
 842:	93 95       	inc	r25
 844:	88 0f       	add	r24, r24
 846:	08 f0       	brcs	.+2      	; 0x84a <__addsf3x+0xa2>
 848:	99 27       	eor	r25, r25
 84a:	ee 0f       	add	r30, r30
 84c:	97 95       	ror	r25
 84e:	87 95       	ror	r24
 850:	08 95       	ret

00000852 <__cmpsf2>:
 852:	0e 94 a1 04 	call	0x942	; 0x942 <__fp_cmp>
 856:	08 f4       	brcc	.+2      	; 0x85a <__cmpsf2+0x8>
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	08 95       	ret

0000085c <__fixsfsi>:
 85c:	0e 94 35 04 	call	0x86a	; 0x86a <__fixunssfsi>
 860:	68 94       	set
 862:	b1 11       	cpse	r27, r1
 864:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__fp_szero>
 868:	08 95       	ret

0000086a <__fixunssfsi>:
 86a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__fp_splitA>
 86e:	88 f0       	brcs	.+34     	; 0x892 <__fixunssfsi+0x28>
 870:	9f 57       	subi	r25, 0x7F	; 127
 872:	98 f0       	brcs	.+38     	; 0x89a <__fixunssfsi+0x30>
 874:	b9 2f       	mov	r27, r25
 876:	99 27       	eor	r25, r25
 878:	b7 51       	subi	r27, 0x17	; 23
 87a:	b0 f0       	brcs	.+44     	; 0x8a8 <__fixunssfsi+0x3e>
 87c:	e1 f0       	breq	.+56     	; 0x8b6 <__fixunssfsi+0x4c>
 87e:	66 0f       	add	r22, r22
 880:	77 1f       	adc	r23, r23
 882:	88 1f       	adc	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	1a f0       	brmi	.+6      	; 0x88e <__fixunssfsi+0x24>
 888:	ba 95       	dec	r27
 88a:	c9 f7       	brne	.-14     	; 0x87e <__fixunssfsi+0x14>
 88c:	14 c0       	rjmp	.+40     	; 0x8b6 <__fixunssfsi+0x4c>
 88e:	b1 30       	cpi	r27, 0x01	; 1
 890:	91 f0       	breq	.+36     	; 0x8b6 <__fixunssfsi+0x4c>
 892:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fp_zero>
 896:	b1 e0       	ldi	r27, 0x01	; 1
 898:	08 95       	ret
 89a:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_zero>
 89e:	67 2f       	mov	r22, r23
 8a0:	78 2f       	mov	r23, r24
 8a2:	88 27       	eor	r24, r24
 8a4:	b8 5f       	subi	r27, 0xF8	; 248
 8a6:	39 f0       	breq	.+14     	; 0x8b6 <__fixunssfsi+0x4c>
 8a8:	b9 3f       	cpi	r27, 0xF9	; 249
 8aa:	cc f3       	brlt	.-14     	; 0x89e <__fixunssfsi+0x34>
 8ac:	86 95       	lsr	r24
 8ae:	77 95       	ror	r23
 8b0:	67 95       	ror	r22
 8b2:	b3 95       	inc	r27
 8b4:	d9 f7       	brne	.-10     	; 0x8ac <__fixunssfsi+0x42>
 8b6:	3e f4       	brtc	.+14     	; 0x8c6 <__fixunssfsi+0x5c>
 8b8:	90 95       	com	r25
 8ba:	80 95       	com	r24
 8bc:	70 95       	com	r23
 8be:	61 95       	neg	r22
 8c0:	7f 4f       	sbci	r23, 0xFF	; 255
 8c2:	8f 4f       	sbci	r24, 0xFF	; 255
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	08 95       	ret

000008c8 <__floatunsisf>:
 8c8:	e8 94       	clt
 8ca:	09 c0       	rjmp	.+18     	; 0x8de <__floatsisf+0x12>

000008cc <__floatsisf>:
 8cc:	97 fb       	bst	r25, 7
 8ce:	3e f4       	brtc	.+14     	; 0x8de <__floatsisf+0x12>
 8d0:	90 95       	com	r25
 8d2:	80 95       	com	r24
 8d4:	70 95       	com	r23
 8d6:	61 95       	neg	r22
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	8f 4f       	sbci	r24, 0xFF	; 255
 8dc:	9f 4f       	sbci	r25, 0xFF	; 255
 8de:	99 23       	and	r25, r25
 8e0:	a9 f0       	breq	.+42     	; 0x90c <__floatsisf+0x40>
 8e2:	f9 2f       	mov	r31, r25
 8e4:	96 e9       	ldi	r25, 0x96	; 150
 8e6:	bb 27       	eor	r27, r27
 8e8:	93 95       	inc	r25
 8ea:	f6 95       	lsr	r31
 8ec:	87 95       	ror	r24
 8ee:	77 95       	ror	r23
 8f0:	67 95       	ror	r22
 8f2:	b7 95       	ror	r27
 8f4:	f1 11       	cpse	r31, r1
 8f6:	f8 cf       	rjmp	.-16     	; 0x8e8 <__floatsisf+0x1c>
 8f8:	fa f4       	brpl	.+62     	; 0x938 <__floatsisf+0x6c>
 8fa:	bb 0f       	add	r27, r27
 8fc:	11 f4       	brne	.+4      	; 0x902 <__floatsisf+0x36>
 8fe:	60 ff       	sbrs	r22, 0
 900:	1b c0       	rjmp	.+54     	; 0x938 <__floatsisf+0x6c>
 902:	6f 5f       	subi	r22, 0xFF	; 255
 904:	7f 4f       	sbci	r23, 0xFF	; 255
 906:	8f 4f       	sbci	r24, 0xFF	; 255
 908:	9f 4f       	sbci	r25, 0xFF	; 255
 90a:	16 c0       	rjmp	.+44     	; 0x938 <__floatsisf+0x6c>
 90c:	88 23       	and	r24, r24
 90e:	11 f0       	breq	.+4      	; 0x914 <__floatsisf+0x48>
 910:	96 e9       	ldi	r25, 0x96	; 150
 912:	11 c0       	rjmp	.+34     	; 0x936 <__floatsisf+0x6a>
 914:	77 23       	and	r23, r23
 916:	21 f0       	breq	.+8      	; 0x920 <__floatsisf+0x54>
 918:	9e e8       	ldi	r25, 0x8E	; 142
 91a:	87 2f       	mov	r24, r23
 91c:	76 2f       	mov	r23, r22
 91e:	05 c0       	rjmp	.+10     	; 0x92a <__floatsisf+0x5e>
 920:	66 23       	and	r22, r22
 922:	71 f0       	breq	.+28     	; 0x940 <__floatsisf+0x74>
 924:	96 e8       	ldi	r25, 0x86	; 134
 926:	86 2f       	mov	r24, r22
 928:	70 e0       	ldi	r23, 0x00	; 0
 92a:	60 e0       	ldi	r22, 0x00	; 0
 92c:	2a f0       	brmi	.+10     	; 0x938 <__floatsisf+0x6c>
 92e:	9a 95       	dec	r25
 930:	66 0f       	add	r22, r22
 932:	77 1f       	adc	r23, r23
 934:	88 1f       	adc	r24, r24
 936:	da f7       	brpl	.-10     	; 0x92e <__floatsisf+0x62>
 938:	88 0f       	add	r24, r24
 93a:	96 95       	lsr	r25
 93c:	87 95       	ror	r24
 93e:	97 f9       	bld	r25, 7
 940:	08 95       	ret

00000942 <__fp_cmp>:
 942:	99 0f       	add	r25, r25
 944:	00 08       	sbc	r0, r0
 946:	55 0f       	add	r21, r21
 948:	aa 0b       	sbc	r26, r26
 94a:	e0 e8       	ldi	r30, 0x80	; 128
 94c:	fe ef       	ldi	r31, 0xFE	; 254
 94e:	16 16       	cp	r1, r22
 950:	17 06       	cpc	r1, r23
 952:	e8 07       	cpc	r30, r24
 954:	f9 07       	cpc	r31, r25
 956:	c0 f0       	brcs	.+48     	; 0x988 <__fp_cmp+0x46>
 958:	12 16       	cp	r1, r18
 95a:	13 06       	cpc	r1, r19
 95c:	e4 07       	cpc	r30, r20
 95e:	f5 07       	cpc	r31, r21
 960:	98 f0       	brcs	.+38     	; 0x988 <__fp_cmp+0x46>
 962:	62 1b       	sub	r22, r18
 964:	73 0b       	sbc	r23, r19
 966:	84 0b       	sbc	r24, r20
 968:	95 0b       	sbc	r25, r21
 96a:	39 f4       	brne	.+14     	; 0x97a <__fp_cmp+0x38>
 96c:	0a 26       	eor	r0, r26
 96e:	61 f0       	breq	.+24     	; 0x988 <__fp_cmp+0x46>
 970:	23 2b       	or	r18, r19
 972:	24 2b       	or	r18, r20
 974:	25 2b       	or	r18, r21
 976:	21 f4       	brne	.+8      	; 0x980 <__fp_cmp+0x3e>
 978:	08 95       	ret
 97a:	0a 26       	eor	r0, r26
 97c:	09 f4       	brne	.+2      	; 0x980 <__fp_cmp+0x3e>
 97e:	a1 40       	sbci	r26, 0x01	; 1
 980:	a6 95       	lsr	r26
 982:	8f ef       	ldi	r24, 0xFF	; 255
 984:	81 1d       	adc	r24, r1
 986:	81 1d       	adc	r24, r1
 988:	08 95       	ret

0000098a <__fp_inf>:
 98a:	97 f9       	bld	r25, 7
 98c:	9f 67       	ori	r25, 0x7F	; 127
 98e:	80 e8       	ldi	r24, 0x80	; 128
 990:	70 e0       	ldi	r23, 0x00	; 0
 992:	60 e0       	ldi	r22, 0x00	; 0
 994:	08 95       	ret

00000996 <__fp_nan>:
 996:	9f ef       	ldi	r25, 0xFF	; 255
 998:	80 ec       	ldi	r24, 0xC0	; 192
 99a:	08 95       	ret

0000099c <__fp_pscA>:
 99c:	00 24       	eor	r0, r0
 99e:	0a 94       	dec	r0
 9a0:	16 16       	cp	r1, r22
 9a2:	17 06       	cpc	r1, r23
 9a4:	18 06       	cpc	r1, r24
 9a6:	09 06       	cpc	r0, r25
 9a8:	08 95       	ret

000009aa <__fp_pscB>:
 9aa:	00 24       	eor	r0, r0
 9ac:	0a 94       	dec	r0
 9ae:	12 16       	cp	r1, r18
 9b0:	13 06       	cpc	r1, r19
 9b2:	14 06       	cpc	r1, r20
 9b4:	05 06       	cpc	r0, r21
 9b6:	08 95       	ret

000009b8 <__fp_round>:
 9b8:	09 2e       	mov	r0, r25
 9ba:	03 94       	inc	r0
 9bc:	00 0c       	add	r0, r0
 9be:	11 f4       	brne	.+4      	; 0x9c4 <__fp_round+0xc>
 9c0:	88 23       	and	r24, r24
 9c2:	52 f0       	brmi	.+20     	; 0x9d8 <__fp_round+0x20>
 9c4:	bb 0f       	add	r27, r27
 9c6:	40 f4       	brcc	.+16     	; 0x9d8 <__fp_round+0x20>
 9c8:	bf 2b       	or	r27, r31
 9ca:	11 f4       	brne	.+4      	; 0x9d0 <__fp_round+0x18>
 9cc:	60 ff       	sbrs	r22, 0
 9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__fp_round+0x20>
 9d0:	6f 5f       	subi	r22, 0xFF	; 255
 9d2:	7f 4f       	sbci	r23, 0xFF	; 255
 9d4:	8f 4f       	sbci	r24, 0xFF	; 255
 9d6:	9f 4f       	sbci	r25, 0xFF	; 255
 9d8:	08 95       	ret

000009da <__fp_split3>:
 9da:	57 fd       	sbrc	r21, 7
 9dc:	90 58       	subi	r25, 0x80	; 128
 9de:	44 0f       	add	r20, r20
 9e0:	55 1f       	adc	r21, r21
 9e2:	59 f0       	breq	.+22     	; 0x9fa <__fp_splitA+0x10>
 9e4:	5f 3f       	cpi	r21, 0xFF	; 255
 9e6:	71 f0       	breq	.+28     	; 0xa04 <__fp_splitA+0x1a>
 9e8:	47 95       	ror	r20

000009ea <__fp_splitA>:
 9ea:	88 0f       	add	r24, r24
 9ec:	97 fb       	bst	r25, 7
 9ee:	99 1f       	adc	r25, r25
 9f0:	61 f0       	breq	.+24     	; 0xa0a <__fp_splitA+0x20>
 9f2:	9f 3f       	cpi	r25, 0xFF	; 255
 9f4:	79 f0       	breq	.+30     	; 0xa14 <__fp_splitA+0x2a>
 9f6:	87 95       	ror	r24
 9f8:	08 95       	ret
 9fa:	12 16       	cp	r1, r18
 9fc:	13 06       	cpc	r1, r19
 9fe:	14 06       	cpc	r1, r20
 a00:	55 1f       	adc	r21, r21
 a02:	f2 cf       	rjmp	.-28     	; 0x9e8 <__fp_split3+0xe>
 a04:	46 95       	lsr	r20
 a06:	f1 df       	rcall	.-30     	; 0x9ea <__fp_splitA>
 a08:	08 c0       	rjmp	.+16     	; 0xa1a <__fp_splitA+0x30>
 a0a:	16 16       	cp	r1, r22
 a0c:	17 06       	cpc	r1, r23
 a0e:	18 06       	cpc	r1, r24
 a10:	99 1f       	adc	r25, r25
 a12:	f1 cf       	rjmp	.-30     	; 0x9f6 <__fp_splitA+0xc>
 a14:	86 95       	lsr	r24
 a16:	71 05       	cpc	r23, r1
 a18:	61 05       	cpc	r22, r1
 a1a:	08 94       	sec
 a1c:	08 95       	ret

00000a1e <__fp_zero>:
 a1e:	e8 94       	clt

00000a20 <__fp_szero>:
 a20:	bb 27       	eor	r27, r27
 a22:	66 27       	eor	r22, r22
 a24:	77 27       	eor	r23, r23
 a26:	cb 01       	movw	r24, r22
 a28:	97 f9       	bld	r25, 7
 a2a:	08 95       	ret

00000a2c <__gesf2>:
 a2c:	0e 94 a1 04 	call	0x942	; 0x942 <__fp_cmp>
 a30:	08 f4       	brcc	.+2      	; 0xa34 <__gesf2+0x8>
 a32:	8f ef       	ldi	r24, 0xFF	; 255
 a34:	08 95       	ret

00000a36 <__mulsf3>:
 a36:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__mulsf3x>
 a3a:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__fp_round>
 a3e:	0e 94 ce 04 	call	0x99c	; 0x99c <__fp_pscA>
 a42:	38 f0       	brcs	.+14     	; 0xa52 <__mulsf3+0x1c>
 a44:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__fp_pscB>
 a48:	20 f0       	brcs	.+8      	; 0xa52 <__mulsf3+0x1c>
 a4a:	95 23       	and	r25, r21
 a4c:	11 f0       	breq	.+4      	; 0xa52 <__mulsf3+0x1c>
 a4e:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__fp_inf>
 a52:	0c 94 cb 04 	jmp	0x996	; 0x996 <__fp_nan>
 a56:	11 24       	eor	r1, r1
 a58:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__fp_szero>

00000a5c <__mulsf3x>:
 a5c:	0e 94 ed 04 	call	0x9da	; 0x9da <__fp_split3>
 a60:	70 f3       	brcs	.-36     	; 0xa3e <__mulsf3+0x8>

00000a62 <__mulsf3_pse>:
 a62:	95 9f       	mul	r25, r21
 a64:	c1 f3       	breq	.-16     	; 0xa56 <__mulsf3+0x20>
 a66:	95 0f       	add	r25, r21
 a68:	50 e0       	ldi	r21, 0x00	; 0
 a6a:	55 1f       	adc	r21, r21
 a6c:	62 9f       	mul	r22, r18
 a6e:	f0 01       	movw	r30, r0
 a70:	72 9f       	mul	r23, r18
 a72:	bb 27       	eor	r27, r27
 a74:	f0 0d       	add	r31, r0
 a76:	b1 1d       	adc	r27, r1
 a78:	63 9f       	mul	r22, r19
 a7a:	aa 27       	eor	r26, r26
 a7c:	f0 0d       	add	r31, r0
 a7e:	b1 1d       	adc	r27, r1
 a80:	aa 1f       	adc	r26, r26
 a82:	64 9f       	mul	r22, r20
 a84:	66 27       	eor	r22, r22
 a86:	b0 0d       	add	r27, r0
 a88:	a1 1d       	adc	r26, r1
 a8a:	66 1f       	adc	r22, r22
 a8c:	82 9f       	mul	r24, r18
 a8e:	22 27       	eor	r18, r18
 a90:	b0 0d       	add	r27, r0
 a92:	a1 1d       	adc	r26, r1
 a94:	62 1f       	adc	r22, r18
 a96:	73 9f       	mul	r23, r19
 a98:	b0 0d       	add	r27, r0
 a9a:	a1 1d       	adc	r26, r1
 a9c:	62 1f       	adc	r22, r18
 a9e:	83 9f       	mul	r24, r19
 aa0:	a0 0d       	add	r26, r0
 aa2:	61 1d       	adc	r22, r1
 aa4:	22 1f       	adc	r18, r18
 aa6:	74 9f       	mul	r23, r20
 aa8:	33 27       	eor	r19, r19
 aaa:	a0 0d       	add	r26, r0
 aac:	61 1d       	adc	r22, r1
 aae:	23 1f       	adc	r18, r19
 ab0:	84 9f       	mul	r24, r20
 ab2:	60 0d       	add	r22, r0
 ab4:	21 1d       	adc	r18, r1
 ab6:	82 2f       	mov	r24, r18
 ab8:	76 2f       	mov	r23, r22
 aba:	6a 2f       	mov	r22, r26
 abc:	11 24       	eor	r1, r1
 abe:	9f 57       	subi	r25, 0x7F	; 127
 ac0:	50 40       	sbci	r21, 0x00	; 0
 ac2:	9a f0       	brmi	.+38     	; 0xaea <__mulsf3_pse+0x88>
 ac4:	f1 f0       	breq	.+60     	; 0xb02 <__mulsf3_pse+0xa0>
 ac6:	88 23       	and	r24, r24
 ac8:	4a f0       	brmi	.+18     	; 0xadc <__mulsf3_pse+0x7a>
 aca:	ee 0f       	add	r30, r30
 acc:	ff 1f       	adc	r31, r31
 ace:	bb 1f       	adc	r27, r27
 ad0:	66 1f       	adc	r22, r22
 ad2:	77 1f       	adc	r23, r23
 ad4:	88 1f       	adc	r24, r24
 ad6:	91 50       	subi	r25, 0x01	; 1
 ad8:	50 40       	sbci	r21, 0x00	; 0
 ada:	a9 f7       	brne	.-22     	; 0xac6 <__mulsf3_pse+0x64>
 adc:	9e 3f       	cpi	r25, 0xFE	; 254
 ade:	51 05       	cpc	r21, r1
 ae0:	80 f0       	brcs	.+32     	; 0xb02 <__mulsf3_pse+0xa0>
 ae2:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__fp_inf>
 ae6:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__fp_szero>
 aea:	5f 3f       	cpi	r21, 0xFF	; 255
 aec:	e4 f3       	brlt	.-8      	; 0xae6 <__mulsf3_pse+0x84>
 aee:	98 3e       	cpi	r25, 0xE8	; 232
 af0:	d4 f3       	brlt	.-12     	; 0xae6 <__mulsf3_pse+0x84>
 af2:	86 95       	lsr	r24
 af4:	77 95       	ror	r23
 af6:	67 95       	ror	r22
 af8:	b7 95       	ror	r27
 afa:	f7 95       	ror	r31
 afc:	e7 95       	ror	r30
 afe:	9f 5f       	subi	r25, 0xFF	; 255
 b00:	c1 f7       	brne	.-16     	; 0xaf2 <__mulsf3_pse+0x90>
 b02:	fe 2b       	or	r31, r30
 b04:	88 0f       	add	r24, r24
 b06:	91 1d       	adc	r25, r1
 b08:	96 95       	lsr	r25
 b0a:	87 95       	ror	r24
 b0c:	97 f9       	bld	r25, 7
 b0e:	08 95       	ret

00000b10 <__umulhisi3>:
 b10:	a2 9f       	mul	r26, r18
 b12:	b0 01       	movw	r22, r0
 b14:	b3 9f       	mul	r27, r19
 b16:	c0 01       	movw	r24, r0
 b18:	a3 9f       	mul	r26, r19
 b1a:	70 0d       	add	r23, r0
 b1c:	81 1d       	adc	r24, r1
 b1e:	11 24       	eor	r1, r1
 b20:	91 1d       	adc	r25, r1
 b22:	b2 9f       	mul	r27, r18
 b24:	70 0d       	add	r23, r0
 b26:	81 1d       	adc	r24, r1
 b28:	11 24       	eor	r1, r1
 b2a:	91 1d       	adc	r25, r1
 b2c:	08 95       	ret

00000b2e <_exit>:
 b2e:	f8 94       	cli

00000b30 <__stop_program>:
 b30:	ff cf       	rjmp	.-2      	; 0xb30 <__stop_program>
