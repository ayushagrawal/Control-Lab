
linefollow.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000898  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000898  0000092c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  0080007a  0080007a  00000946  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000978  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011f8  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000734  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a12  00000000  00000000  000023e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00002dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000556  00000000  00000000  00003024  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000049f  00000000  00000000  0000357a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00003a19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3a       	cpi	r26, 0xA0	; 160
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 21 02 	call	0x442	; 0x442 <main>
  8a:	0c 94 4a 04 	jmp	0x894	; 0x894 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_port_config>:
	motion_set(0x00);
}

void soft_stop (void)       //soft stop(stops slowly)
{
	motion_set(0x0F);
  92:	84 b3       	in	r24, 0x14	; 20
  94:	87 6f       	ori	r24, 0xF7	; 247
  96:	84 bb       	out	0x14, r24	; 20
  98:	85 b3       	in	r24, 0x15	; 21
  9a:	80 78       	andi	r24, 0x80	; 128
  9c:	85 bb       	out	0x15, r24	; 21
  9e:	08 95       	ret

000000a0 <lcd_set_4bit>:
  a0:	89 ef       	ldi	r24, 0xF9	; 249
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_set_4bit+0x4>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <lcd_set_4bit+0xa>
  aa:	00 00       	nop
  ac:	a8 98       	cbi	0x15, 0	; 21
  ae:	a9 98       	cbi	0x15, 1	; 21
  b0:	80 e3       	ldi	r24, 0x30	; 48
  b2:	85 bb       	out	0x15, r24	; 21
  b4:	aa 9a       	sbi	0x15, 2	; 21
  b6:	e1 ee       	ldi	r30, 0xE1	; 225
  b8:	f4 e0       	ldi	r31, 0x04	; 4
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcd_set_4bit+0x1a>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcd_set_4bit+0x20>
  c0:	00 00       	nop
  c2:	aa 98       	cbi	0x15, 2	; 21
  c4:	e9 ef       	ldi	r30, 0xF9	; 249
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <lcd_set_4bit+0x28>
  cc:	00 c0       	rjmp	.+0      	; 0xce <lcd_set_4bit+0x2e>
  ce:	00 00       	nop
  d0:	a8 98       	cbi	0x15, 0	; 21
  d2:	a9 98       	cbi	0x15, 1	; 21
  d4:	85 bb       	out	0x15, r24	; 21
  d6:	aa 9a       	sbi	0x15, 2	; 21
  d8:	e1 ee       	ldi	r30, 0xE1	; 225
  da:	f4 e0       	ldi	r31, 0x04	; 4
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcd_set_4bit+0x3c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <lcd_set_4bit+0x42>
  e2:	00 00       	nop
  e4:	aa 98       	cbi	0x15, 2	; 21
  e6:	e9 ef       	ldi	r30, 0xF9	; 249
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <lcd_set_4bit+0x4a>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_set_4bit+0x50>
  f0:	00 00       	nop
  f2:	a8 98       	cbi	0x15, 0	; 21
  f4:	a9 98       	cbi	0x15, 1	; 21
  f6:	85 bb       	out	0x15, r24	; 21
  f8:	aa 9a       	sbi	0x15, 2	; 21
  fa:	81 ee       	ldi	r24, 0xE1	; 225
  fc:	94 e0       	ldi	r25, 0x04	; 4
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <lcd_set_4bit+0x5e>
 102:	00 c0       	rjmp	.+0      	; 0x104 <lcd_set_4bit+0x64>
 104:	00 00       	nop
 106:	aa 98       	cbi	0x15, 2	; 21
 108:	e9 ef       	ldi	r30, 0xF9	; 249
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_set_4bit+0x6c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_set_4bit+0x72>
 112:	00 00       	nop
 114:	a8 98       	cbi	0x15, 0	; 21
 116:	a9 98       	cbi	0x15, 1	; 21
 118:	80 e2       	ldi	r24, 0x20	; 32
 11a:	85 bb       	out	0x15, r24	; 21
 11c:	aa 9a       	sbi	0x15, 2	; 21
 11e:	81 ee       	ldi	r24, 0xE1	; 225
 120:	94 e0       	ldi	r25, 0x04	; 4
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <lcd_set_4bit+0x82>
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_set_4bit+0x88>
 128:	00 00       	nop
 12a:	aa 98       	cbi	0x15, 2	; 21
 12c:	08 95       	ret

0000012e <lcd_wr_command>:
 12e:	95 b3       	in	r25, 0x15	; 21
 130:	9f 70       	andi	r25, 0x0F	; 15
 132:	95 bb       	out	0x15, r25	; 21
 134:	95 b3       	in	r25, 0x15	; 21
 136:	28 2f       	mov	r18, r24
 138:	20 7f       	andi	r18, 0xF0	; 240
 13a:	92 2b       	or	r25, r18
 13c:	95 bb       	out	0x15, r25	; 21
 13e:	a8 98       	cbi	0x15, 0	; 21
 140:	a9 98       	cbi	0x15, 1	; 21
 142:	aa 9a       	sbi	0x15, 2	; 21
 144:	e1 ee       	ldi	r30, 0xE1	; 225
 146:	f4 e0       	ldi	r31, 0x04	; 4
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcd_wr_command+0x1a>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <lcd_wr_command+0x20>
 14e:	00 00       	nop
 150:	aa 98       	cbi	0x15, 2	; 21
 152:	95 b3       	in	r25, 0x15	; 21
 154:	9f 70       	andi	r25, 0x0F	; 15
 156:	95 bb       	out	0x15, r25	; 21
 158:	95 b3       	in	r25, 0x15	; 21
 15a:	82 95       	swap	r24
 15c:	80 7f       	andi	r24, 0xF0	; 240
 15e:	89 2b       	or	r24, r25
 160:	85 bb       	out	0x15, r24	; 21
 162:	a8 98       	cbi	0x15, 0	; 21
 164:	a9 98       	cbi	0x15, 1	; 21
 166:	aa 9a       	sbi	0x15, 2	; 21
 168:	81 ee       	ldi	r24, 0xE1	; 225
 16a:	94 e0       	ldi	r25, 0x04	; 4
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_wr_command+0x3e>
 170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_wr_command+0x44>
 172:	00 00       	nop
 174:	aa 98       	cbi	0x15, 2	; 21
 176:	08 95       	ret

00000178 <lcd_init>:
 178:	89 ef       	ldi	r24, 0xF9	; 249
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <lcd_init+0x4>
 180:	00 c0       	rjmp	.+0      	; 0x182 <lcd_init+0xa>
 182:	00 00       	nop
 184:	88 e2       	ldi	r24, 0x28	; 40
 186:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_wr_command>
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_wr_command>
 190:	86 e0       	ldi	r24, 0x06	; 6
 192:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_wr_command>
 196:	8e e0       	ldi	r24, 0x0E	; 14
 198:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_wr_command>
 19c:	80 e8       	ldi	r24, 0x80	; 128
 19e:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_wr_command>
 1a2:	08 95       	ret

000001a4 <lcd_wr_char>:
 1a4:	95 b3       	in	r25, 0x15	; 21
 1a6:	9f 70       	andi	r25, 0x0F	; 15
 1a8:	95 bb       	out	0x15, r25	; 21
 1aa:	95 b3       	in	r25, 0x15	; 21
 1ac:	28 2f       	mov	r18, r24
 1ae:	20 7f       	andi	r18, 0xF0	; 240
 1b0:	92 2b       	or	r25, r18
 1b2:	95 bb       	out	0x15, r25	; 21
 1b4:	a8 9a       	sbi	0x15, 0	; 21
 1b6:	a9 98       	cbi	0x15, 1	; 21
 1b8:	aa 9a       	sbi	0x15, 2	; 21
 1ba:	e1 ee       	ldi	r30, 0xE1	; 225
 1bc:	f4 e0       	ldi	r31, 0x04	; 4
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_wr_char+0x1a>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <lcd_wr_char+0x20>
 1c4:	00 00       	nop
 1c6:	aa 98       	cbi	0x15, 2	; 21
 1c8:	95 b3       	in	r25, 0x15	; 21
 1ca:	9f 70       	andi	r25, 0x0F	; 15
 1cc:	95 bb       	out	0x15, r25	; 21
 1ce:	95 b3       	in	r25, 0x15	; 21
 1d0:	82 95       	swap	r24
 1d2:	80 7f       	andi	r24, 0xF0	; 240
 1d4:	89 2b       	or	r24, r25
 1d6:	85 bb       	out	0x15, r24	; 21
 1d8:	a8 9a       	sbi	0x15, 0	; 21
 1da:	a9 98       	cbi	0x15, 1	; 21
 1dc:	aa 9a       	sbi	0x15, 2	; 21
 1de:	81 ee       	ldi	r24, 0xE1	; 225
 1e0:	94 e0       	ldi	r25, 0x04	; 4
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_wr_char+0x3e>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_wr_char+0x44>
 1e8:	00 00       	nop
 1ea:	aa 98       	cbi	0x15, 2	; 21
 1ec:	08 95       	ret

000001ee <lcd_string>:
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
 1f4:	88 81       	ld	r24, Y
 1f6:	88 23       	and	r24, r24
 1f8:	31 f0       	breq	.+12     	; 0x206 <lcd_string+0x18>
 1fa:	21 96       	adiw	r28, 0x01	; 1
 1fc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_wr_char>
 200:	89 91       	ld	r24, Y+
 202:	81 11       	cpse	r24, r1
 204:	fb cf       	rjmp	.-10     	; 0x1fc <lcd_string+0xe>
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <velocity>:
 20c:	1b bc       	out	0x2b, r1	; 43
 20e:	8a bd       	out	0x2a, r24	; 42
 210:	19 bc       	out	0x29, r1	; 41
 212:	68 bd       	out	0x28, r22	; 40
 214:	08 95       	ret

00000216 <motion_pin_config>:
 216:	87 b3       	in	r24, 0x17	; 23
 218:	8f 60       	ori	r24, 0x0F	; 15
 21a:	87 bb       	out	0x17, r24	; 23
 21c:	88 b3       	in	r24, 0x18	; 24
 21e:	80 7f       	andi	r24, 0xF0	; 240
 220:	88 bb       	out	0x18, r24	; 24
 222:	81 b3       	in	r24, 0x11	; 17
 224:	80 63       	ori	r24, 0x30	; 48
 226:	81 bb       	out	0x11, r24	; 17
 228:	82 b3       	in	r24, 0x12	; 18
 22a:	80 63       	ori	r24, 0x30	; 48
 22c:	82 bb       	out	0x12, r24	; 18
 22e:	08 95       	ret

00000230 <motion_set>:
 230:	98 b3       	in	r25, 0x18	; 24
 232:	90 7f       	andi	r25, 0xF0	; 240
 234:	8f 70       	andi	r24, 0x0F	; 15
 236:	98 2b       	or	r25, r24
 238:	98 bb       	out	0x18, r25	; 24
 23a:	08 95       	ret

0000023c <forward>:
 23c:	86 e0       	ldi	r24, 0x06	; 6
 23e:	0e 94 18 01 	call	0x230	; 0x230 <motion_set>
 242:	08 95       	ret

00000244 <back>:
 244:	89 e0       	ldi	r24, 0x09	; 9
 246:	0e 94 18 01 	call	0x230	; 0x230 <motion_set>
 24a:	08 95       	ret

0000024c <left>:
 24c:	85 e0       	ldi	r24, 0x05	; 5
 24e:	0e 94 18 01 	call	0x230	; 0x230 <motion_set>
 252:	08 95       	ret

00000254 <right>:
 254:	8a e0       	ldi	r24, 0x0A	; 10
 256:	0e 94 18 01 	call	0x230	; 0x230 <motion_set>
 25a:	08 95       	ret

0000025c <adc_init>:
	return (a > b) ? a : b;
}*/
//Function to Initialize ADC
void adc_init()
{
	ADCSRA = 0x00;
 25c:	16 b8       	out	0x06, r1	; 6
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 25e:	80 e2       	ldi	r24, 0x20	; 32
 260:	87 b9       	out	0x07, r24	; 7
	ACSR = 0x80;
 262:	80 e8       	ldi	r24, 0x80	; 128
 264:	88 b9       	out	0x08, r24	; 8
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 266:	86 e8       	ldi	r24, 0x86	; 134
 268:	86 b9       	out	0x06, r24	; 6
 26a:	08 95       	ret

0000026c <adc_pin_config>:
}

//ADC pin configuration
void adc_pin_config (void)
{
	DDRA = 0x00;   //set PORTF direction as input
 26c:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x00;  //set PORTF pins floating
 26e:	1b ba       	out	0x1b, r1	; 27
 270:	08 95       	ret

00000272 <ADC_Conversion>:

//This Function accepts the Channel Number and returns the corresponding Analog Value
unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	Ch = Ch & 0x07;
 272:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;
 274:	80 62       	ori	r24, 0x20	; 32
 276:	87 b9       	out	0x07, r24	; 7
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 278:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
 27a:	34 9b       	sbis	0x06, 4	; 6
 27c:	fe cf       	rjmp	.-4      	; 0x27a <ADC_Conversion+0x8>
	a=ADCH;
 27e:	85 b1       	in	r24, 0x05	; 5
	ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 280:	34 9a       	sbi	0x06, 4	; 6
	return a;
}
 282:	08 95       	ret

00000284 <timer1_init>:
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// desired value: 450Hz
// actual value: 450.000Hz (0.0%)
void timer1_init(void)
{
	TCCR1B = 0x00; //stop
 284:	1e bc       	out	0x2e, r1	; 46
	TCNT1H = 0xFF; //setup
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0x01;
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	9c bd       	out	0x2c, r25	; 44
	OCR1AH = 0x00;
 28e:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = 0xFF;
 290:	8a bd       	out	0x2a, r24	; 42
	OCR1BH = 0x00;
 292:	19 bc       	out	0x29, r1	; 41
	OCR1BL = 0xFF;
 294:	88 bd       	out	0x28, r24	; 40
	ICR1H  = 0x00;
 296:	17 bc       	out	0x27, r1	; 39
	ICR1L  = 0xFF;
 298:	86 bd       	out	0x26, r24	; 38
	TCCR1A = 0xA1;
 29a:	81 ea       	ldi	r24, 0xA1	; 161
 29c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x0D; //start Timer
 29e:	8d e0       	ldi	r24, 0x0D	; 13
 2a0:	8e bd       	out	0x2e, r24	; 46
 2a2:	08 95       	ret

000002a4 <init>:
}

void init()
{
	cli();					// Clears the global interrupts
 2a4:	f8 94       	cli
	lcd_port_config();
 2a6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_port_config>
	adc_init();
 2aa:	0e 94 2e 01 	call	0x25c	; 0x25c <adc_init>
	adc_pin_config();
 2ae:	0e 94 36 01 	call	0x26c	; 0x26c <adc_pin_config>
	timer1_init();
 2b2:	0e 94 42 01 	call	0x284	; 0x284 <timer1_init>
	motion_pin_config();	// Refer the function
 2b6:	0e 94 0b 01 	call	0x216	; 0x216 <motion_pin_config>
	sei();					// Enables the global interrupts
 2ba:	78 94       	sei
	lcd_set_4bit();			// Setting the LCD to 4 bit mode
 2bc:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_set_4bit>
	lcd_init();
 2c0:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_init>
 2c4:	08 95       	ret

000002c6 <compute_error>:


// Used for defining the error function
//	Uses global values of the ADC values and outputs in the global "error" variable
void compute_error(void)
{
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
	error = rightLine - leftLine;
 2ce:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <rightLine>
 2d2:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <leftLine>
 2d6:	82 2f       	mov	r24, r18
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	83 1b       	sub	r24, r19
 2dc:	91 09       	sbc	r25, r1
 2de:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <error+0x1>
 2e2:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <error>
	byepass = 0;
 2e6:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <byepass+0x1>
 2ea:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <byepass>
	if(centerLine >100 && rightLine < 20 && leftLine < 20)		// If center is the only one on black line
 2ee:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <centerLine>
 2f2:	85 36       	cpi	r24, 0x65	; 101
 2f4:	50 f0       	brcs	.+20     	; 0x30a <compute_error+0x44>
 2f6:	24 31       	cpi	r18, 0x14	; 20
 2f8:	40 f4       	brcc	.+16     	; 0x30a <compute_error+0x44>
 2fa:	34 31       	cpi	r19, 0x14	; 20
 2fc:	30 f4       	brcc	.+12     	; 0x30a <compute_error+0x44>
	{
		flag = 1;
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	50 93 81 00 	sts	0x0081, r21	; 0x800081 <flag+0x1>
 306:	40 93 80 00 	sts	0x0080, r20	; 0x800080 <flag>
	}
	
	if((centerLine < 15 && rightLine< 15 && leftLine< 15))			// If everyone is on white line
 30a:	8f 30       	cpi	r24, 0x0F	; 15
 30c:	80 f4       	brcc	.+32     	; 0x32e <compute_error+0x68>
 30e:	2f 30       	cpi	r18, 0x0F	; 15
 310:	70 f4       	brcc	.+28     	; 0x32e <compute_error+0x68>
 312:	3f 30       	cpi	r19, 0x0F	; 15
 314:	60 f4       	brcc	.+24     	; 0x32e <compute_error+0x68>
	{
		velocity(MAX_SPEED,MAX_SPEED);
 316:	6f e7       	ldi	r22, 0x7F	; 127
 318:	8f e7       	ldi	r24, 0x7F	; 127
 31a:	0e 94 06 01 	call	0x20c	; 0x20c <velocity>
		back();
 31e:	0e 94 22 01 	call	0x244	; 0x244 <back>
		byepass = 1;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <byepass+0x1>
 32a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <byepass>
	}
	if((centerLine > 80 && rightLine > 80 && leftLine > 80))		// If everything is on black line
 32e:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <centerLine>
 332:	81 35       	cpi	r24, 0x51	; 81
 334:	c0 f0       	brcs	.+48     	; 0x366 <compute_error+0xa0>
 336:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <rightLine>
 33a:	81 35       	cpi	r24, 0x51	; 81
 33c:	a0 f0       	brcs	.+40     	; 0x366 <compute_error+0xa0>
 33e:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <leftLine>
 342:	81 35       	cpi	r24, 0x51	; 81
 344:	80 f0       	brcs	.+32     	; 0x366 <compute_error+0xa0>
 346:	c5 e0       	ldi	r28, 0x05	; 5
 348:	d0 e0       	ldi	r29, 0x00	; 0
	{	
		for(int i =0; i<5;i++)
		{
			velocity(MAX_SPEED,MAX_SPEED);
			forward();
			byepass = 1;
 34a:	01 e0       	ldi	r16, 0x01	; 1
 34c:	10 e0       	ldi	r17, 0x00	; 0
	}
	if((centerLine > 80 && rightLine > 80 && leftLine > 80))		// If everything is on black line
	{	
		for(int i =0; i<5;i++)
		{
			velocity(MAX_SPEED,MAX_SPEED);
 34e:	6f e7       	ldi	r22, 0x7F	; 127
 350:	8f e7       	ldi	r24, 0x7F	; 127
 352:	0e 94 06 01 	call	0x20c	; 0x20c <velocity>
			forward();
 356:	0e 94 1e 01 	call	0x23c	; 0x23c <forward>
			byepass = 1;
 35a:	10 93 7f 00 	sts	0x007F, r17	; 0x80007f <byepass+0x1>
 35e:	00 93 7e 00 	sts	0x007E, r16	; 0x80007e <byepass>
 362:	21 97       	sbiw	r28, 0x01	; 1
		back();
		byepass = 1;
	}
	if((centerLine > 80 && rightLine > 80 && leftLine > 80))		// If everything is on black line
	{	
		for(int i =0; i<5;i++)
 364:	a1 f7       	brne	.-24     	; 0x34e <compute_error+0x88>
			velocity(MAX_SPEED,MAX_SPEED);
			forward();
			byepass = 1;
		}
	}
	if(rightLine > 60 && leftLine > 60 && centerLine < 15)			// If right and left are on black line and center is not
 366:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <rightLine>
 36a:	8d 33       	cpi	r24, 0x3D	; 61
 36c:	a0 f0       	brcs	.+40     	; 0x396 <compute_error+0xd0>
 36e:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <leftLine>
 372:	8d 33       	cpi	r24, 0x3D	; 61
 374:	80 f0       	brcs	.+32     	; 0x396 <compute_error+0xd0>
 376:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <centerLine>
 37a:	8f 30       	cpi	r24, 0x0F	; 15
 37c:	60 f4       	brcc	.+24     	; 0x396 <compute_error+0xd0>
	{
		velocity(2*MAX_SPEED,2*MAX_SPEED);
 37e:	6e ef       	ldi	r22, 0xFE	; 254
 380:	8e ef       	ldi	r24, 0xFE	; 254
 382:	0e 94 06 01 	call	0x20c	; 0x20c <velocity>
		forward();
 386:	0e 94 1e 01 	call	0x23c	; 0x23c <forward>
		byepass = 1;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <byepass+0x1>
 392:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <byepass>
	}
}
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	1f 91       	pop	r17
 39c:	0f 91       	pop	r16
 39e:	08 95       	ret

000003a0 <motor_control>:

// Used for controlling the motors depending on the value of the "pid" variable
void motor_control(void)
{
	if (flag==1)
 3a0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <flag>
 3a4:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <flag+0x1>
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	59 f4       	brne	.+22     	; 0x3c2 <motor_control+0x22>
	{
		velocity(MAX_SPEED*2,MAX_SPEED*2);
 3ac:	6e ef       	ldi	r22, 0xFE	; 254
 3ae:	8e ef       	ldi	r24, 0xFE	; 254
 3b0:	0e 94 06 01 	call	0x20c	; 0x20c <velocity>
		forward();
 3b4:	0e 94 1e 01 	call	0x23c	; 0x23c <forward>
		flag = 0;
 3b8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <flag+0x1>
 3bc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <flag>
 3c0:	08 95       	ret
	}
	else if((leftLine > rightLine) && byepass == 0)
 3c2:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <leftLine>
 3c6:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <rightLine>
 3ca:	89 17       	cp	r24, r25
 3cc:	e0 f4       	brcc	.+56     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3ce:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <byepass>
 3d2:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <byepass+0x1>
 3d6:	89 2b       	or	r24, r25
 3d8:	99 f5       	brne	.+102    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
	{
		velocity(MAX_SPEED/4 + pid,MAX_SPEED/4 + pid);
 3da:	20 e0       	ldi	r18, 0x00	; 0
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	48 ef       	ldi	r20, 0xF8	; 248
 3e0:	51 e4       	ldi	r21, 0x41	; 65
 3e2:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <pid>
 3e6:	70 91 83 00 	lds	r23, 0x0083	; 0x800083 <pid+0x1>
 3ea:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <pid+0x2>
 3ee:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <pid+0x3>
 3f2:	0e 94 b4 02 	call	0x568	; 0x568 <__addsf3>
 3f6:	0e 94 20 03 	call	0x640	; 0x640 <__fixunssfsi>
 3fa:	86 2f       	mov	r24, r22
 3fc:	0e 94 06 01 	call	0x20c	; 0x20c <velocity>
		left();
 400:	0e 94 26 01 	call	0x24c	; 0x24c <left>
 404:	08 95       	ret
	}
	else if((rightLine > leftLine) && byepass == 0)
 406:	98 17       	cp	r25, r24
 408:	d8 f4       	brcc	.+54     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 40a:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <byepass>
 40e:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <byepass+0x1>
 412:	89 2b       	or	r24, r25
 414:	a9 f4       	brne	.+42     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
	{
		velocity(MAX_SPEED/4 + pid,MAX_SPEED/4 + pid);
 416:	20 e0       	ldi	r18, 0x00	; 0
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	48 ef       	ldi	r20, 0xF8	; 248
 41c:	51 e4       	ldi	r21, 0x41	; 65
 41e:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <pid>
 422:	70 91 83 00 	lds	r23, 0x0083	; 0x800083 <pid+0x1>
 426:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <pid+0x2>
 42a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <pid+0x3>
 42e:	0e 94 b4 02 	call	0x568	; 0x568 <__addsf3>
 432:	0e 94 20 03 	call	0x640	; 0x640 <__fixunssfsi>
 436:	86 2f       	mov	r24, r22
 438:	0e 94 06 01 	call	0x20c	; 0x20c <velocity>
		right();
 43c:	0e 94 2a 01 	call	0x254	; 0x254 <right>
 440:	08 95       	ret

00000442 <main>:

}

int main(void)
{
	init();
 442:	0e 94 52 01 	call	0x2a4	; 0x2a4 <init>
	lcd_string("Starting SPARK V");
 446:	88 e6       	ldi	r24, 0x68	; 104
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 44e:	2f e3       	ldi	r18, 0x3F	; 63
 450:	8d e0       	ldi	r24, 0x0D	; 13
 452:	93 e0       	ldi	r25, 0x03	; 3
 454:	21 50       	subi	r18, 0x01	; 1
 456:	80 40       	sbci	r24, 0x00	; 0
 458:	90 40       	sbci	r25, 0x00	; 0
 45a:	e1 f7       	brne	.-8      	; 0x454 <main+0x12>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <main+0x1c>
 45e:	00 00       	nop
	_delay_ms(1000);
	lcd_init();
 460:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_init>
	forward();
 464:	0e 94 1e 01 	call	0x23c	; 0x23c <forward>
	velocity((char)MAX_SPEED*2,(char)MAX_SPEED*2);
 468:	6e ef       	ldi	r22, 0xFE	; 254
 46a:	8e ef       	ldi	r24, 0xFE	; 254
 46c:	0e 94 06 01 	call	0x20c	; 0x20c <velocity>
	while(1)
	{
		leftLine = ADC_Conversion(3);
 470:	83 e0       	ldi	r24, 0x03	; 3
 472:	0e 94 39 01 	call	0x272	; 0x272 <ADC_Conversion>
 476:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <leftLine>
		centerLine = ADC_Conversion(4);
 47a:	84 e0       	ldi	r24, 0x04	; 4
 47c:	0e 94 39 01 	call	0x272	; 0x272 <ADC_Conversion>
 480:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <centerLine>
		rightLine = ADC_Conversion(5);
 484:	85 e0       	ldi	r24, 0x05	; 5
 486:	0e 94 39 01 	call	0x272	; 0x272 <ADC_Conversion>
 48a:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <rightLine>
		compute_error();
 48e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <compute_error>
		lcd_print(1,9,rightLine,3);*/
		
		// Till now we would have the value of the error

		/****************************** P.I.D. ******************************/
		integral_error = integral_error + error;
 492:	c0 91 8c 00 	lds	r28, 0x008C	; 0x80008c <error>
 496:	d0 91 8d 00 	lds	r29, 0x008D	; 0x80008d <error+0x1>
 49a:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <integral_error>
 49e:	50 91 89 00 	lds	r21, 0x0089	; 0x800089 <integral_error+0x1>
 4a2:	8e 01       	movw	r16, r28
 4a4:	04 0f       	add	r16, r20
 4a6:	15 1f       	adc	r17, r21
 4a8:	10 93 89 00 	sts	0x0089, r17	; 0x800089 <integral_error+0x1>
 4ac:	00 93 88 00 	sts	0x0088, r16	; 0x800088 <integral_error>
		diff_error = error - prev_error;
 4b0:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <prev_error>
 4b4:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <prev_error+0x1>
 4b8:	7e 01       	movw	r14, r28
 4ba:	e8 1a       	sub	r14, r24
 4bc:	f9 0a       	sbc	r15, r25
 4be:	f0 92 87 00 	sts	0x0087, r15	; 0x800087 <diff_error+0x1>
 4c2:	e0 92 86 00 	sts	0x0086, r14	; 0x800086 <diff_error>
		pid = Kp*error + Ki*integral_error + Kd*diff_error;
 4c6:	be 01       	movw	r22, r28
 4c8:	0d 2e       	mov	r0, r29
 4ca:	00 0c       	add	r0, r0
 4cc:	88 0b       	sbc	r24, r24
 4ce:	99 0b       	sbc	r25, r25
 4d0:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__floatsisf>
 4d4:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <Kp>
 4d8:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <Kp+0x1>
 4dc:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <Kp+0x2>
 4e0:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <Kp+0x3>
 4e4:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__mulsf3>
 4e8:	4b 01       	movw	r8, r22
 4ea:	5c 01       	movw	r10, r24
 4ec:	b8 01       	movw	r22, r16
 4ee:	11 0f       	add	r17, r17
 4f0:	88 0b       	sbc	r24, r24
 4f2:	99 0b       	sbc	r25, r25
 4f4:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__floatsisf>
 4f8:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <__data_end>
 4fc:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <__data_end+0x1>
 500:	40 91 7c 00 	lds	r20, 0x007C	; 0x80007c <__data_end+0x2>
 504:	50 91 7d 00 	lds	r21, 0x007D	; 0x80007d <__data_end+0x3>
 508:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__mulsf3>
 50c:	9b 01       	movw	r18, r22
 50e:	ac 01       	movw	r20, r24
 510:	c5 01       	movw	r24, r10
 512:	b4 01       	movw	r22, r8
 514:	0e 94 b4 02 	call	0x568	; 0x568 <__addsf3>
 518:	4b 01       	movw	r8, r22
 51a:	5c 01       	movw	r10, r24
 51c:	b7 01       	movw	r22, r14
 51e:	ff 0c       	add	r15, r15
 520:	88 0b       	sbc	r24, r24
 522:	99 0b       	sbc	r25, r25
 524:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__floatsisf>
 528:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <Kd>
 52c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <Kd+0x1>
 530:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <Kd+0x2>
 534:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <Kd+0x3>
 538:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__mulsf3>
 53c:	9b 01       	movw	r18, r22
 53e:	ac 01       	movw	r20, r24
 540:	c5 01       	movw	r24, r10
 542:	b4 01       	movw	r22, r8
 544:	0e 94 b4 02 	call	0x568	; 0x568 <__addsf3>
 548:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <pid>
 54c:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <pid+0x1>
 550:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <pid+0x2>
 554:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <pid+0x3>
		prev_error = error;
 558:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <prev_error+0x1>
 55c:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <prev_error>
		/****************************** P.I.D. ******************************/
		motor_control();
 560:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <motor_control>
		//_delay_ms(10);
	}
 564:	85 cf       	rjmp	.-246    	; 0x470 <__stack+0x11>

00000566 <__subsf3>:
 566:	50 58       	subi	r21, 0x80	; 128

00000568 <__addsf3>:
 568:	bb 27       	eor	r27, r27
 56a:	aa 27       	eor	r26, r26
 56c:	0e 94 cb 02 	call	0x596	; 0x596 <__addsf3x>
 570:	0c 94 a3 03 	jmp	0x746	; 0x746 <__fp_round>
 574:	0e 94 95 03 	call	0x72a	; 0x72a <__fp_pscA>
 578:	38 f0       	brcs	.+14     	; 0x588 <__addsf3+0x20>
 57a:	0e 94 9c 03 	call	0x738	; 0x738 <__fp_pscB>
 57e:	20 f0       	brcs	.+8      	; 0x588 <__addsf3+0x20>
 580:	39 f4       	brne	.+14     	; 0x590 <__addsf3+0x28>
 582:	9f 3f       	cpi	r25, 0xFF	; 255
 584:	19 f4       	brne	.+6      	; 0x58c <__addsf3+0x24>
 586:	26 f4       	brtc	.+8      	; 0x590 <__addsf3+0x28>
 588:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_nan>
 58c:	0e f4       	brtc	.+2      	; 0x590 <__addsf3+0x28>
 58e:	e0 95       	com	r30
 590:	e7 fb       	bst	r30, 7
 592:	0c 94 8c 03 	jmp	0x718	; 0x718 <__fp_inf>

00000596 <__addsf3x>:
 596:	e9 2f       	mov	r30, r25
 598:	0e 94 b4 03 	call	0x768	; 0x768 <__fp_split3>
 59c:	58 f3       	brcs	.-42     	; 0x574 <__addsf3+0xc>
 59e:	ba 17       	cp	r27, r26
 5a0:	62 07       	cpc	r22, r18
 5a2:	73 07       	cpc	r23, r19
 5a4:	84 07       	cpc	r24, r20
 5a6:	95 07       	cpc	r25, r21
 5a8:	20 f0       	brcs	.+8      	; 0x5b2 <__addsf3x+0x1c>
 5aa:	79 f4       	brne	.+30     	; 0x5ca <__addsf3x+0x34>
 5ac:	a6 f5       	brtc	.+104    	; 0x616 <__addsf3x+0x80>
 5ae:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__fp_zero>
 5b2:	0e f4       	brtc	.+2      	; 0x5b6 <__addsf3x+0x20>
 5b4:	e0 95       	com	r30
 5b6:	0b 2e       	mov	r0, r27
 5b8:	ba 2f       	mov	r27, r26
 5ba:	a0 2d       	mov	r26, r0
 5bc:	0b 01       	movw	r0, r22
 5be:	b9 01       	movw	r22, r18
 5c0:	90 01       	movw	r18, r0
 5c2:	0c 01       	movw	r0, r24
 5c4:	ca 01       	movw	r24, r20
 5c6:	a0 01       	movw	r20, r0
 5c8:	11 24       	eor	r1, r1
 5ca:	ff 27       	eor	r31, r31
 5cc:	59 1b       	sub	r21, r25
 5ce:	99 f0       	breq	.+38     	; 0x5f6 <__addsf3x+0x60>
 5d0:	59 3f       	cpi	r21, 0xF9	; 249
 5d2:	50 f4       	brcc	.+20     	; 0x5e8 <__addsf3x+0x52>
 5d4:	50 3e       	cpi	r21, 0xE0	; 224
 5d6:	68 f1       	brcs	.+90     	; 0x632 <__addsf3x+0x9c>
 5d8:	1a 16       	cp	r1, r26
 5da:	f0 40       	sbci	r31, 0x00	; 0
 5dc:	a2 2f       	mov	r26, r18
 5de:	23 2f       	mov	r18, r19
 5e0:	34 2f       	mov	r19, r20
 5e2:	44 27       	eor	r20, r20
 5e4:	58 5f       	subi	r21, 0xF8	; 248
 5e6:	f3 cf       	rjmp	.-26     	; 0x5ce <__addsf3x+0x38>
 5e8:	46 95       	lsr	r20
 5ea:	37 95       	ror	r19
 5ec:	27 95       	ror	r18
 5ee:	a7 95       	ror	r26
 5f0:	f0 40       	sbci	r31, 0x00	; 0
 5f2:	53 95       	inc	r21
 5f4:	c9 f7       	brne	.-14     	; 0x5e8 <__addsf3x+0x52>
 5f6:	7e f4       	brtc	.+30     	; 0x616 <__addsf3x+0x80>
 5f8:	1f 16       	cp	r1, r31
 5fa:	ba 0b       	sbc	r27, r26
 5fc:	62 0b       	sbc	r22, r18
 5fe:	73 0b       	sbc	r23, r19
 600:	84 0b       	sbc	r24, r20
 602:	ba f0       	brmi	.+46     	; 0x632 <__addsf3x+0x9c>
 604:	91 50       	subi	r25, 0x01	; 1
 606:	a1 f0       	breq	.+40     	; 0x630 <__addsf3x+0x9a>
 608:	ff 0f       	add	r31, r31
 60a:	bb 1f       	adc	r27, r27
 60c:	66 1f       	adc	r22, r22
 60e:	77 1f       	adc	r23, r23
 610:	88 1f       	adc	r24, r24
 612:	c2 f7       	brpl	.-16     	; 0x604 <__addsf3x+0x6e>
 614:	0e c0       	rjmp	.+28     	; 0x632 <__addsf3x+0x9c>
 616:	ba 0f       	add	r27, r26
 618:	62 1f       	adc	r22, r18
 61a:	73 1f       	adc	r23, r19
 61c:	84 1f       	adc	r24, r20
 61e:	48 f4       	brcc	.+18     	; 0x632 <__addsf3x+0x9c>
 620:	87 95       	ror	r24
 622:	77 95       	ror	r23
 624:	67 95       	ror	r22
 626:	b7 95       	ror	r27
 628:	f7 95       	ror	r31
 62a:	9e 3f       	cpi	r25, 0xFE	; 254
 62c:	08 f0       	brcs	.+2      	; 0x630 <__addsf3x+0x9a>
 62e:	b0 cf       	rjmp	.-160    	; 0x590 <__addsf3+0x28>
 630:	93 95       	inc	r25
 632:	88 0f       	add	r24, r24
 634:	08 f0       	brcs	.+2      	; 0x638 <__addsf3x+0xa2>
 636:	99 27       	eor	r25, r25
 638:	ee 0f       	add	r30, r30
 63a:	97 95       	ror	r25
 63c:	87 95       	ror	r24
 63e:	08 95       	ret

00000640 <__fixunssfsi>:
 640:	0e 94 bc 03 	call	0x778	; 0x778 <__fp_splitA>
 644:	88 f0       	brcs	.+34     	; 0x668 <__fixunssfsi+0x28>
 646:	9f 57       	subi	r25, 0x7F	; 127
 648:	98 f0       	brcs	.+38     	; 0x670 <__fixunssfsi+0x30>
 64a:	b9 2f       	mov	r27, r25
 64c:	99 27       	eor	r25, r25
 64e:	b7 51       	subi	r27, 0x17	; 23
 650:	b0 f0       	brcs	.+44     	; 0x67e <__fixunssfsi+0x3e>
 652:	e1 f0       	breq	.+56     	; 0x68c <__fixunssfsi+0x4c>
 654:	66 0f       	add	r22, r22
 656:	77 1f       	adc	r23, r23
 658:	88 1f       	adc	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	1a f0       	brmi	.+6      	; 0x664 <__fixunssfsi+0x24>
 65e:	ba 95       	dec	r27
 660:	c9 f7       	brne	.-14     	; 0x654 <__fixunssfsi+0x14>
 662:	14 c0       	rjmp	.+40     	; 0x68c <__fixunssfsi+0x4c>
 664:	b1 30       	cpi	r27, 0x01	; 1
 666:	91 f0       	breq	.+36     	; 0x68c <__fixunssfsi+0x4c>
 668:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__fp_zero>
 66c:	b1 e0       	ldi	r27, 0x01	; 1
 66e:	08 95       	ret
 670:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__fp_zero>
 674:	67 2f       	mov	r22, r23
 676:	78 2f       	mov	r23, r24
 678:	88 27       	eor	r24, r24
 67a:	b8 5f       	subi	r27, 0xF8	; 248
 67c:	39 f0       	breq	.+14     	; 0x68c <__fixunssfsi+0x4c>
 67e:	b9 3f       	cpi	r27, 0xF9	; 249
 680:	cc f3       	brlt	.-14     	; 0x674 <__fixunssfsi+0x34>
 682:	86 95       	lsr	r24
 684:	77 95       	ror	r23
 686:	67 95       	ror	r22
 688:	b3 95       	inc	r27
 68a:	d9 f7       	brne	.-10     	; 0x682 <__fixunssfsi+0x42>
 68c:	3e f4       	brtc	.+14     	; 0x69c <__fixunssfsi+0x5c>
 68e:	90 95       	com	r25
 690:	80 95       	com	r24
 692:	70 95       	com	r23
 694:	61 95       	neg	r22
 696:	7f 4f       	sbci	r23, 0xFF	; 255
 698:	8f 4f       	sbci	r24, 0xFF	; 255
 69a:	9f 4f       	sbci	r25, 0xFF	; 255
 69c:	08 95       	ret

0000069e <__floatunsisf>:
 69e:	e8 94       	clt
 6a0:	09 c0       	rjmp	.+18     	; 0x6b4 <__floatsisf+0x12>

000006a2 <__floatsisf>:
 6a2:	97 fb       	bst	r25, 7
 6a4:	3e f4       	brtc	.+14     	; 0x6b4 <__floatsisf+0x12>
 6a6:	90 95       	com	r25
 6a8:	80 95       	com	r24
 6aa:	70 95       	com	r23
 6ac:	61 95       	neg	r22
 6ae:	7f 4f       	sbci	r23, 0xFF	; 255
 6b0:	8f 4f       	sbci	r24, 0xFF	; 255
 6b2:	9f 4f       	sbci	r25, 0xFF	; 255
 6b4:	99 23       	and	r25, r25
 6b6:	a9 f0       	breq	.+42     	; 0x6e2 <__floatsisf+0x40>
 6b8:	f9 2f       	mov	r31, r25
 6ba:	96 e9       	ldi	r25, 0x96	; 150
 6bc:	bb 27       	eor	r27, r27
 6be:	93 95       	inc	r25
 6c0:	f6 95       	lsr	r31
 6c2:	87 95       	ror	r24
 6c4:	77 95       	ror	r23
 6c6:	67 95       	ror	r22
 6c8:	b7 95       	ror	r27
 6ca:	f1 11       	cpse	r31, r1
 6cc:	f8 cf       	rjmp	.-16     	; 0x6be <__floatsisf+0x1c>
 6ce:	fa f4       	brpl	.+62     	; 0x70e <__floatsisf+0x6c>
 6d0:	bb 0f       	add	r27, r27
 6d2:	11 f4       	brne	.+4      	; 0x6d8 <__floatsisf+0x36>
 6d4:	60 ff       	sbrs	r22, 0
 6d6:	1b c0       	rjmp	.+54     	; 0x70e <__floatsisf+0x6c>
 6d8:	6f 5f       	subi	r22, 0xFF	; 255
 6da:	7f 4f       	sbci	r23, 0xFF	; 255
 6dc:	8f 4f       	sbci	r24, 0xFF	; 255
 6de:	9f 4f       	sbci	r25, 0xFF	; 255
 6e0:	16 c0       	rjmp	.+44     	; 0x70e <__floatsisf+0x6c>
 6e2:	88 23       	and	r24, r24
 6e4:	11 f0       	breq	.+4      	; 0x6ea <__floatsisf+0x48>
 6e6:	96 e9       	ldi	r25, 0x96	; 150
 6e8:	11 c0       	rjmp	.+34     	; 0x70c <__floatsisf+0x6a>
 6ea:	77 23       	and	r23, r23
 6ec:	21 f0       	breq	.+8      	; 0x6f6 <__floatsisf+0x54>
 6ee:	9e e8       	ldi	r25, 0x8E	; 142
 6f0:	87 2f       	mov	r24, r23
 6f2:	76 2f       	mov	r23, r22
 6f4:	05 c0       	rjmp	.+10     	; 0x700 <__floatsisf+0x5e>
 6f6:	66 23       	and	r22, r22
 6f8:	71 f0       	breq	.+28     	; 0x716 <__floatsisf+0x74>
 6fa:	96 e8       	ldi	r25, 0x86	; 134
 6fc:	86 2f       	mov	r24, r22
 6fe:	70 e0       	ldi	r23, 0x00	; 0
 700:	60 e0       	ldi	r22, 0x00	; 0
 702:	2a f0       	brmi	.+10     	; 0x70e <__floatsisf+0x6c>
 704:	9a 95       	dec	r25
 706:	66 0f       	add	r22, r22
 708:	77 1f       	adc	r23, r23
 70a:	88 1f       	adc	r24, r24
 70c:	da f7       	brpl	.-10     	; 0x704 <__floatsisf+0x62>
 70e:	88 0f       	add	r24, r24
 710:	96 95       	lsr	r25
 712:	87 95       	ror	r24
 714:	97 f9       	bld	r25, 7
 716:	08 95       	ret

00000718 <__fp_inf>:
 718:	97 f9       	bld	r25, 7
 71a:	9f 67       	ori	r25, 0x7F	; 127
 71c:	80 e8       	ldi	r24, 0x80	; 128
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	60 e0       	ldi	r22, 0x00	; 0
 722:	08 95       	ret

00000724 <__fp_nan>:
 724:	9f ef       	ldi	r25, 0xFF	; 255
 726:	80 ec       	ldi	r24, 0xC0	; 192
 728:	08 95       	ret

0000072a <__fp_pscA>:
 72a:	00 24       	eor	r0, r0
 72c:	0a 94       	dec	r0
 72e:	16 16       	cp	r1, r22
 730:	17 06       	cpc	r1, r23
 732:	18 06       	cpc	r1, r24
 734:	09 06       	cpc	r0, r25
 736:	08 95       	ret

00000738 <__fp_pscB>:
 738:	00 24       	eor	r0, r0
 73a:	0a 94       	dec	r0
 73c:	12 16       	cp	r1, r18
 73e:	13 06       	cpc	r1, r19
 740:	14 06       	cpc	r1, r20
 742:	05 06       	cpc	r0, r21
 744:	08 95       	ret

00000746 <__fp_round>:
 746:	09 2e       	mov	r0, r25
 748:	03 94       	inc	r0
 74a:	00 0c       	add	r0, r0
 74c:	11 f4       	brne	.+4      	; 0x752 <__fp_round+0xc>
 74e:	88 23       	and	r24, r24
 750:	52 f0       	brmi	.+20     	; 0x766 <__fp_round+0x20>
 752:	bb 0f       	add	r27, r27
 754:	40 f4       	brcc	.+16     	; 0x766 <__fp_round+0x20>
 756:	bf 2b       	or	r27, r31
 758:	11 f4       	brne	.+4      	; 0x75e <__fp_round+0x18>
 75a:	60 ff       	sbrs	r22, 0
 75c:	04 c0       	rjmp	.+8      	; 0x766 <__fp_round+0x20>
 75e:	6f 5f       	subi	r22, 0xFF	; 255
 760:	7f 4f       	sbci	r23, 0xFF	; 255
 762:	8f 4f       	sbci	r24, 0xFF	; 255
 764:	9f 4f       	sbci	r25, 0xFF	; 255
 766:	08 95       	ret

00000768 <__fp_split3>:
 768:	57 fd       	sbrc	r21, 7
 76a:	90 58       	subi	r25, 0x80	; 128
 76c:	44 0f       	add	r20, r20
 76e:	55 1f       	adc	r21, r21
 770:	59 f0       	breq	.+22     	; 0x788 <__fp_splitA+0x10>
 772:	5f 3f       	cpi	r21, 0xFF	; 255
 774:	71 f0       	breq	.+28     	; 0x792 <__fp_splitA+0x1a>
 776:	47 95       	ror	r20

00000778 <__fp_splitA>:
 778:	88 0f       	add	r24, r24
 77a:	97 fb       	bst	r25, 7
 77c:	99 1f       	adc	r25, r25
 77e:	61 f0       	breq	.+24     	; 0x798 <__fp_splitA+0x20>
 780:	9f 3f       	cpi	r25, 0xFF	; 255
 782:	79 f0       	breq	.+30     	; 0x7a2 <__fp_splitA+0x2a>
 784:	87 95       	ror	r24
 786:	08 95       	ret
 788:	12 16       	cp	r1, r18
 78a:	13 06       	cpc	r1, r19
 78c:	14 06       	cpc	r1, r20
 78e:	55 1f       	adc	r21, r21
 790:	f2 cf       	rjmp	.-28     	; 0x776 <__fp_split3+0xe>
 792:	46 95       	lsr	r20
 794:	f1 df       	rcall	.-30     	; 0x778 <__fp_splitA>
 796:	08 c0       	rjmp	.+16     	; 0x7a8 <__fp_splitA+0x30>
 798:	16 16       	cp	r1, r22
 79a:	17 06       	cpc	r1, r23
 79c:	18 06       	cpc	r1, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	f1 cf       	rjmp	.-30     	; 0x784 <__fp_splitA+0xc>
 7a2:	86 95       	lsr	r24
 7a4:	71 05       	cpc	r23, r1
 7a6:	61 05       	cpc	r22, r1
 7a8:	08 94       	sec
 7aa:	08 95       	ret

000007ac <__fp_zero>:
 7ac:	e8 94       	clt

000007ae <__fp_szero>:
 7ae:	bb 27       	eor	r27, r27
 7b0:	66 27       	eor	r22, r22
 7b2:	77 27       	eor	r23, r23
 7b4:	cb 01       	movw	r24, r22
 7b6:	97 f9       	bld	r25, 7
 7b8:	08 95       	ret

000007ba <__mulsf3>:
 7ba:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__mulsf3x>
 7be:	0c 94 a3 03 	jmp	0x746	; 0x746 <__fp_round>
 7c2:	0e 94 95 03 	call	0x72a	; 0x72a <__fp_pscA>
 7c6:	38 f0       	brcs	.+14     	; 0x7d6 <__mulsf3+0x1c>
 7c8:	0e 94 9c 03 	call	0x738	; 0x738 <__fp_pscB>
 7cc:	20 f0       	brcs	.+8      	; 0x7d6 <__mulsf3+0x1c>
 7ce:	95 23       	and	r25, r21
 7d0:	11 f0       	breq	.+4      	; 0x7d6 <__mulsf3+0x1c>
 7d2:	0c 94 8c 03 	jmp	0x718	; 0x718 <__fp_inf>
 7d6:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_nan>
 7da:	11 24       	eor	r1, r1
 7dc:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <__fp_szero>

000007e0 <__mulsf3x>:
 7e0:	0e 94 b4 03 	call	0x768	; 0x768 <__fp_split3>
 7e4:	70 f3       	brcs	.-36     	; 0x7c2 <__mulsf3+0x8>

000007e6 <__mulsf3_pse>:
 7e6:	95 9f       	mul	r25, r21
 7e8:	c1 f3       	breq	.-16     	; 0x7da <__mulsf3+0x20>
 7ea:	95 0f       	add	r25, r21
 7ec:	50 e0       	ldi	r21, 0x00	; 0
 7ee:	55 1f       	adc	r21, r21
 7f0:	62 9f       	mul	r22, r18
 7f2:	f0 01       	movw	r30, r0
 7f4:	72 9f       	mul	r23, r18
 7f6:	bb 27       	eor	r27, r27
 7f8:	f0 0d       	add	r31, r0
 7fa:	b1 1d       	adc	r27, r1
 7fc:	63 9f       	mul	r22, r19
 7fe:	aa 27       	eor	r26, r26
 800:	f0 0d       	add	r31, r0
 802:	b1 1d       	adc	r27, r1
 804:	aa 1f       	adc	r26, r26
 806:	64 9f       	mul	r22, r20
 808:	66 27       	eor	r22, r22
 80a:	b0 0d       	add	r27, r0
 80c:	a1 1d       	adc	r26, r1
 80e:	66 1f       	adc	r22, r22
 810:	82 9f       	mul	r24, r18
 812:	22 27       	eor	r18, r18
 814:	b0 0d       	add	r27, r0
 816:	a1 1d       	adc	r26, r1
 818:	62 1f       	adc	r22, r18
 81a:	73 9f       	mul	r23, r19
 81c:	b0 0d       	add	r27, r0
 81e:	a1 1d       	adc	r26, r1
 820:	62 1f       	adc	r22, r18
 822:	83 9f       	mul	r24, r19
 824:	a0 0d       	add	r26, r0
 826:	61 1d       	adc	r22, r1
 828:	22 1f       	adc	r18, r18
 82a:	74 9f       	mul	r23, r20
 82c:	33 27       	eor	r19, r19
 82e:	a0 0d       	add	r26, r0
 830:	61 1d       	adc	r22, r1
 832:	23 1f       	adc	r18, r19
 834:	84 9f       	mul	r24, r20
 836:	60 0d       	add	r22, r0
 838:	21 1d       	adc	r18, r1
 83a:	82 2f       	mov	r24, r18
 83c:	76 2f       	mov	r23, r22
 83e:	6a 2f       	mov	r22, r26
 840:	11 24       	eor	r1, r1
 842:	9f 57       	subi	r25, 0x7F	; 127
 844:	50 40       	sbci	r21, 0x00	; 0
 846:	9a f0       	brmi	.+38     	; 0x86e <__mulsf3_pse+0x88>
 848:	f1 f0       	breq	.+60     	; 0x886 <__mulsf3_pse+0xa0>
 84a:	88 23       	and	r24, r24
 84c:	4a f0       	brmi	.+18     	; 0x860 <__mulsf3_pse+0x7a>
 84e:	ee 0f       	add	r30, r30
 850:	ff 1f       	adc	r31, r31
 852:	bb 1f       	adc	r27, r27
 854:	66 1f       	adc	r22, r22
 856:	77 1f       	adc	r23, r23
 858:	88 1f       	adc	r24, r24
 85a:	91 50       	subi	r25, 0x01	; 1
 85c:	50 40       	sbci	r21, 0x00	; 0
 85e:	a9 f7       	brne	.-22     	; 0x84a <__mulsf3_pse+0x64>
 860:	9e 3f       	cpi	r25, 0xFE	; 254
 862:	51 05       	cpc	r21, r1
 864:	80 f0       	brcs	.+32     	; 0x886 <__mulsf3_pse+0xa0>
 866:	0c 94 8c 03 	jmp	0x718	; 0x718 <__fp_inf>
 86a:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <__fp_szero>
 86e:	5f 3f       	cpi	r21, 0xFF	; 255
 870:	e4 f3       	brlt	.-8      	; 0x86a <__mulsf3_pse+0x84>
 872:	98 3e       	cpi	r25, 0xE8	; 232
 874:	d4 f3       	brlt	.-12     	; 0x86a <__mulsf3_pse+0x84>
 876:	86 95       	lsr	r24
 878:	77 95       	ror	r23
 87a:	67 95       	ror	r22
 87c:	b7 95       	ror	r27
 87e:	f7 95       	ror	r31
 880:	e7 95       	ror	r30
 882:	9f 5f       	subi	r25, 0xFF	; 255
 884:	c1 f7       	brne	.-16     	; 0x876 <__mulsf3_pse+0x90>
 886:	fe 2b       	or	r31, r30
 888:	88 0f       	add	r24, r24
 88a:	91 1d       	adc	r25, r1
 88c:	96 95       	lsr	r25
 88e:	87 95       	ror	r24
 890:	97 f9       	bld	r25, 7
 892:	08 95       	ret

00000894 <_exit>:
 894:	f8 94       	cli

00000896 <__stop_program>:
 896:	ff cf       	rjmp	.-2      	; 0x896 <__stop_program>
